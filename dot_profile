#!/usr/bin/env bash

# chsh -s /usr/bin/zsh

# 全体的にXDG BASED_DIRECTORYに設定する

HOSTNAME="$(uname -n)"
export HOSTNAME

if command -v dpkg >/dev/null 2>&1; then
    ARCH="$(dpkg --print-architecture)"
elif command -v uname >/dev/null 2>&1; then
    ARCH="$(uname -m)"
else
    ARCH="unknown"
fi
export ARCH

# ${VAR} "${VAR}" "${VAR:-var}" は環境変数
# ' : ' で区切り

# XDG DIRECTORY を作成して権限を700に設定
mkdir -p \
    "${HOME}/.local/share" \
    "${HOME}/.config" \
    "${HOME}/.local/state" \
    "${HOME}/.cache"
chmod 700 \
    "${HOME}/.config" \
    "${HOME}/.local/share" \
    "${HOME}/.local/state" \
    "${HOME}/.cache" \
    "${HOME}/.ssh"

# XDG DIRECTORY
export XDG_CONFIG_HOME=${HOME}/.config
export XDG_STATE_HOME=${HOME}/.local/state
export XDG_DATA_HOME=${HOME}/.local/share
export XDG_CACHE_HOME=${HOME}/.cache

# export XDG_DATA_DIRS="/usr/local/share:/usr/share:${HOME}/data"
# export XDG_CONFIG_DIRS="/etc/xdg/xdg-ubuntu:/etc/xdg"
# XDG_RUNTIME_DIR=/run/user/$(id -u)
# export XDG_RUNTIME_DIR

mkdir -p \
    "${HOME}/Desktop" \
    "${HOME}/Downloads" \
    "${HOME}/Documents" \
    "${HOME}/Public" \
    "${HOME}/Music" \
    "${HOME}/Pictures" \
    "${HOME}/Movies" \
    "${HOME}/Templates"
export XDG_DESKTOP_DIR=${HOME}/Desktop
export XDG_DOWNLOAD_DIR=${HOME}/Downloads
export XDG_DOCUMENTS_DIR=${HOME}/Documents
export XDG_PUBLICSHARE_DIR=${HOME}/Public
export XDG_MUSIC_DIR=${HOME}/Music
export XDG_PICTURES_DIR=${HOME}/Pictures
export XDG_VIDEOS_DIR=${HOME}/Movies
export XDG_TEMPLATES_DIR=${HOME}/Templates

#export XDG_SESSION_TYPE=X11
#export XDG_SESSION_ID=1

export TZ="Asia/Tokyo"
export LANG="ja_JP.UTF-8"
export LC_ALL="ja_JP.UTF-8"
# TUIの表示乱れ防止
export LC_CTYPE="en_US.UTF-8"
# export DISPLAY=":0:${DISPLAY}"

export TMPDIR="/tmp"
export TERM="xterm-256color"

# パスを再設定
PATH="${PATH}:${HOME}/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
export PATH

if command -v cursor >/dev/null 2>&1; then
    export EDITOR="cursor"
elif command -v code >/dev/null 2>&1; then
    export EDITOR="code"
elif command -v codium >/dev/null 2>&1; then
    export EDITOR="codium"
else
    export EDITOR="vim"
fi

if command -v brave-browser >/dev/null 2>&1; then
    export BROWSER="brave-browser"
fi

if command -v brew >/dev/null 2>&1; then
    export HOMEBREW_PREFIX="/opt/homebrew"
fi

if command -v mise >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/mise"
    export MISE_CONFIG_DIR="${XDG_CONFIG_HOME}/mise"
    touch "${MISE_CONFIG_DIR}/shorthands.toml"
    export MISE_SHORTHANDS_FILE="${MISE_CONFIG_DIR}/shorthands.toml"
fi

if command -v aqua >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/aquaproj-aqua" "${XDG_DATA_HOME}/aquaproj-aqua"
    export PATH="${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua/bin:${PATH}"
    export AQUA_GLOBAL_CONFIG="${AQUA_GLOBAL_CONFIG:-}:${XDG_CONFIG_HOME:-$HOME/.config}/aquaproj-aqua/aqua.yaml"
fi

if command -v code >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/Code/user-data/User"
    export VSCODE_PORTABLE="${XDG_CONFIG_HOME}/Code"
    # export VSCODE_PORTABLE="${XDG_DATA_HOME}/Code"
fi

if command -v docker >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/docker" "${XDG_DATA_HOME}/docker/machine"
    export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"
    # export DOCKER_CONTEXT="default"
    # export DOCKER_HOST="unix:///var/run/docker.sock"
    export MACHINE_STORAGE_PATH="${XDG_DATA_HOME}/docker/machine"
fi

if command -v npm >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/npm" "${XDG_DATA_HOME}/node"
    export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"
    export NODE_REPL_HISTORY="${XDG_DATA_HOME}/node/node_repl_history"
    #export store-dir="${XDG_DATA_HOME}/pnpm-store"
fi

if command -v mkcert >/dev/null 2>&1; then
    NODE_EXTRA_CA_CERTS="$(mkcert -CAROOT)/rootCA.pem"
    export NODE_EXTRA_CA_CERTS
fi

if command -v go >/dev/null 2>&1; then
    mkdir -p "${XDG_DATA_HOME}/go"
    export GOPATH="${XDG_DATA_HOME}/go"
    # export GOPATH="${HOME}/.go"
    export GOROOT="${GOPATH}"
    export PATH="${GOPATH}/bin:${PATH}"
fi

if command -v cargo >/dev/null 2>&1; then
    mkdir -p "${XDG_DATA_HOME}/cargo" "${XDG_DATA_HOME}/rustup"
    export CARGO_HOME="${XDG_DATA_HOME}/cargo"
    # export CARGO_HOME="${HOME}/.cargo"
    export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"
    export PATH="${CARGO_HOME}/bin:${PATH}"
fi

if command -v gem >/dev/null 2>&1; then
    mkdir -p "${XDG_DATA_HOME}/gem" "${XDG_CACHE_HOME}/gem"
    export GEM_HOME="${XDG_DATA_HOME}/gem"
    export GEM_SPEC_CACHE="${XDG_CACHE_HOME}/gem"
fi

if command -v python3 >/dev/null 2>&1; then
    mkdir -p "${XDG_DATA_HOME}/python" "${XDG_CACHE_HOME}/python" "${XDG_CONFIG_HOME}/python" "${XDG_STATE_HOME}/python"
    export PYTHONUSERBASE="${XDG_DATA_HOME}/python"
    export PYTHONHISTORY="${XDG_STATE_HOME}/python/history"
    export PYTHONPYCACHEPREFIX="${XDG_CACHE_HOME}/python"
    export PYTHONSTARTUP="${XDG_CONFIG_HOME}/python/pythonrc"
fi

if command -v poetry >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/poetry" "${XDG_CACHE_HOME}/poetry"
    export POETRY_HOME="${XDG_CONFIG_HOME}/poetry"
    export POETRY_CACHE="${XDG_CACHE_HOME}/poetry"
    export POETRY_VIRTUALENVS_IN_PROJECT=true
fi

if command -v jupyter >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/jupyter"
    export JUPYTER_CONFIG_DIR="${XDG_CONFIG_HOME}/jupyter"
    export IPYTHONDIR="${XDG_CONFIG_HOME}/jupyter"
fi

if command -v java >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/java" "${XDG_CONFIG_HOME}/maven" "${XDG_DATA_HOME}/java"
    export JAVA_HOME="${XDG_DATA_HOME}/java"
    export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=${XDG_CONFIG_HOME}/java"
    export MAVEN_HOME="${XDG_CONFIG_HOME}/maven"
    export MAVEN_CONFIG="${XDG_CONFIG_HOME}/maven"
    #mvn -gs "${XDG_CONFIG_HOME}/maven/settings.xml"
fi

#mkdir -p "${XDG_CONFIG_HOME}/pg" && mkdir -p "${XDG_CACHE_HOME}/pg"
#export PSQLRC="${XDG_CONFIG_HOME}/pg/psqlrc"
#export PGPASSFILE="${XDG_CONFIG_HOME}/pg/pgpass"
#export PGSERVICEFILE="${XDG_CONFIG_HOME}/pg/pg_service.conf"
#export PSQL_HISTORY="${XDG_CACHE_HOME}/pg/psql_history"

#mkdir -p "${XDG_CONFIG_HOME}/redis"
#export REDISCLI_HISTFILE="${XDG_DATA_HOME}/redis/rediscli_history"
#export REDISCLI_RCFILE="${XDG_CONFIG_HOME}/redis/redisclirc"

#mkdir -p "${XDG_DATA_HOME}/wineprefixes"
#export WINEPREFIX="${XDG_DATA_HOME}/wineprefixes/default"

#mkdir -p "${XDG_CONFIG_HOME}/android"
#export ANDROID_HOME="${HOME}/Library/Android/sdk"
#export ANDROID_USER_HOME="${XDG_CONFIG_HOME}/android"
# export PATH="${ANDROID_HOME}/bin:${PATH}"

if command -v vim >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/vim" "${XDG_CONFIG_HOME}/nvim"
    # export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
    export VIMINIT='let $MYVIMRC = !has("nvim") ? "${XDG_CONFIG_HOME}/vim/vimrc" : "${XDG_CONFIG_HOME}/nvim/init.vim" | source $MYVIMRC'
fi

# mkdir -p "${XDG_CONFIG_HOME}/spacemacs"
# export SPACEMACSDIR="${XDG_CONFIG_HOME}/spacemacs"
# mv ~/.spacemacs "$SPACEMACSDIR/init.el"


if command -v byobu >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/byobu"
    export BYOBU_CONFIG_DIR="${XDG_CONFIG_HOME}/byobu"
fi

if command -v ipfs >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/ipfs"
    export IPFS_PATH="${XDG_CONFIG_HOME}/ipfs"
fi

if command -v starship >/dev/null 2>&1; then
    mkdir -p "${XDG_CACHE_HOME}/starship"
    export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship.toml"
    export STARSHIP_CACHE="${XDG_CACHE_HOME}/starship"
fi

if command -v zoxide >/dev/null 2>&1; then
    mkdir -p "${XDG_DATA_HOME}/z"
    export Z_DATA="${XDG_DATA_HOME}/z"
fi

if command -v ffmpeg >/dev/null 2>&1; then
    mkdir -p "${XDG_CONFIG_HOME}/ffmpeg"
    export FFMPEG_DATADIR="${XDG_CONFIG_HOME}/ffmpeg"
fi
