name: Tag and Release
# mainブランチにpushされたら タグを作成してリリースを作成する
on:
  push:
    branches:
      - main
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # リリースを作成するために必要
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create tag and release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 最新のタグを取得
          git fetch --tags origin
          latest_tag=$(git tag -l | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            latest_tag="0.0.0"
          fi
          echo "最新のタグ: $latest_tag"

          # バージョン番号を増やす
          IFS='.' read -r major minor patch <<< "$latest_tag"
          new_patch=$((patch + 1))
          new_tag="$major.$minor.$new_patch"
          echo "新しいタグ: $new_tag"

          # タグを作成してプッシュ
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag $new_tag
          git push origin $new_tag

          # ログを収集
          if [ -z "$latest_tag" ]; then
            RANGE="HEAD"
          else
            RANGE="$latest_tag..HEAD"
          fi

          # 機能追加
          FEATURES=$(git log ${RANGE} --pretty=format:"* %s (%h)" --grep="^feat:" --no-merges)
          # バグ修正
          FIXES=$(git log ${RANGE} --pretty=format:"* %s (%h)" --grep="^fix:" --no-merges)
          # その他の変更
          OTHERS=$(git log ${RANGE} --pretty=format:"* %s (%h)" --grep="^(docs|style|refactor|test|chore):" --no-merges)

          # 主要な統計情報
          STATS=$(git diff ${RANGE} --shortstat)
          FILES=$(git diff ${RANGE} --name-only | sort | uniq | wc -l)

          # リリースを作成（自動生成されたリリースノート付き）
          gh release create "$new_tag" \
            --title="$new_tag" \
            --notes="$RANGE\n$FEATURES\n$FIXES\n$OTHERS\n$STATS\n$FILES\n$(date)" \
            --latest \
            --generate-notes
