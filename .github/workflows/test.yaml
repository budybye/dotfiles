name: Test

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}/ubuntu-dev
 # REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      packages: write
      # contents: read
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          labels: |
            org.opencontainers.image.description=${{ env.PLATFORM_PAIR }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .devcontainer
          platforms: ${{ matrix.platform }}
          # tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}
          cache-to: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }},mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true,annotation-index.org.opencontainers.image.description=${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Docker compose test
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: .devcontainer/docker-compose.yaml
          services: |
            ipfs
            # ubuntu
            # portainer
            # cloudflared

      - name: Test exec
        run: |
          docker ps -a
          docker compose -f .devcontainer/docker-compose.yaml exec ipfs bash -c "ipfs config show"


      # - name: devcontainer ci
        # uses: devcontainers/ci@v0.3
        # with:
        #   push: always
        #   subFolder: .devcontainer
        #   imageName: ${{ env.REGISTRY_IMAGE }}
        #   imageTag: ${{ env.PLATFORM_PAIR }}
        #   platform: ${{ matrix.platform }}
        #   cacheFrom: ${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}

  merge:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      packages: write
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  ubuntu-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: make
        run: make sense

  mac-test:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: make
        run: make sense

  windows-test:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      - uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04

      - shell: wsl-bash {0}
        run: |
          ls -la
          uname -a

  cloud-init-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # cloud-init-linter
      - uses: anderssonPeter/cloud-init-linter@v1
        with:
          files: |
            cloud-init/multipass.yaml
            cloud-init/user-data
            cloud-init/network-config
