name: Test

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

  schedule:
    # 平日のUTC16:20と 日本時間(UTC+9) 16:20に実行
    - cron: "20 16,7 * * 1-5"

env:
  REGISTRY_IMAGE: ghcr.io/budybye/ubuntu-dev

jobs:

  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

        flavor:
          - name: dev
            use_bedrock: false
          - name: slim
            use_bedrock: true

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          labels: |
            org.opencontainers.image.description=${{ env.PLATFORM_PAIR }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        if: matrix.flavor.name == 'slim'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .devcontainer
          platforms: ${{ matrix.platform }}
          build-args: USE_BEDROCK=${{ matrix.flavor.use_bedrock }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          cache-to: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }},mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Build and push devcontainer
        if: matrix.flavor.name == 'dev'
        id: devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.REGISTRY_IMAGE }}
          imageTag: ${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          # platform: ${{ matrix.platform }}
          cacheFrom: |
            ${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          env: |
            USE_BEDROCK: true
            TARGETPLATFORM: ${{ matrix.platform }}
          # push: always
          push: never
          runCmd: |
            env
            ls -la

      - name: Export digest
        if: matrix.flavor.name == 'slim'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: matrix.flavor.name == 'slim'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Docker compose test
        if: matrix.flavor.name == 'slim'
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: .devcontainer/docker-compose.yaml
          services: |
            ubuntu
            portainer
            ipfs
            tunnel-portainer
            tunnel-ipfs

      - name: Test
        if: matrix.flavor.name == 'slim'
        run: |
          docker ps -a
          docker compose -f .devcontainer/docker-compose.yaml exec ubuntu env

  merge:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      packages: write
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        flavor:
          - name: dev
          - name: slim
    steps:
      - name: Download digests
        if: matrix.flavor.name == 'slim'
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*-${{ matrix.flavor.name }}
          merge-multiple: true

      - name: Set up Docker Buildx
        if: matrix.flavor.name == 'slim'
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          # tags: |
          #   type=semver,pattern=${{ github.ref_name }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        if: matrix.flavor.name == 'slim'
        working-directory: /tmp/digests
        run: |
          flavor=${{ matrix.flavor.name }}
          tags=$(jq -cr --arg flavor "$flavor" '.tags | map("-t " + . + "-" + $flavor) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
          docker buildx imagetools create $tags \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        if: matrix.flavor.name == 'slim'
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}-${{ matrix.flavor.name }}

  ubuntu-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: make
        run: make init

  mac-test:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: make
        run: make init

  windows-test:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      - uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04

      - shell: wsl-bash {0}
        run: |
          ls -la
          uname -a

  cloud-init:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@main
        with:
          channel: latest/edge

      - name: Launch container
        run: |
          lxc profile create bob && cat cloud-init/lxd.yaml | lxc profile edit bob
          lxc launch ubuntu:24.04 ubuntu -p default -p bob
          lxc exec ubuntu -- cloud-init status --wait || true
          lxc exec ubuntu -- tail -2 /var/log/cloud-init.log
          # lxc launch ubuntu:24.04 ubuntu --config=user.user-data="$(cat cloud-init/user-data)"
