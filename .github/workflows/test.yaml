name: Test

on:
  push:
    # branches:
    #   - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  PACKAGE: ghcr.io/${{ github.repository }}/ubuntu-dev

jobs:

  build:
    runs-on: ubuntu-24.04

    # 並列でマルチプラットフォームビルドを行う
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     platforms: [linux/amd64, linux/arm64]

    permissions:
      contents: read
      packages: write

    steps:
      # プラットフォームを環境変数にセットするアクション
      # - name: Set vars
      #   id: vars
      #   run: |
      #     echo "platform=$(echo -n ${{ matrix.platforms }} | sed 's/\//-/g')" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
      # qemuをセットアップ
      - uses: docker/setup-qemu-action@v3
      # buildxをセットアップ
      - uses: docker/setup-buildx-action@v3
      # ghcrにログイン
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Pushするイメージのメタデータを設定
      # - uses: docker/metadata-action@v5
      #   id: meta
      #   with:
      #     images: ${{ env.PACKAGE }}
      #     labels: |
      #       org.opencontainers.image.description=Ubuntu Dev Container
      #     annotations: |
      #       org.opencontainers.image.description=${{ steps.vars.outputs.platform }}

      # キャッシュを復元
      - uses: actions/cache@v4
        with:
          path: /tmp/.ubuntu-dev-cache-${{ github.sha }} # キャッシュのパスを指定
          key: ${{ github.ref }}-${{ github.sha }} # キャッシュのキーを指定
          restore-keys: |
            ${{ github.ref }}
            refs/head/main

      # イメージをビルドしてPush
      - uses: docker/build-push-action@v6
        with:
          context: .devcontainer # ビルドするコンテキストを指定
          platforms: linux/amd64,linux/arm64
          # platforms: ${{ matrix.platforms }}
          tags: ${{ env.PACKAGE }}:${{ github.ref_name }} # タグを指定
          # tags: ${{ steps.meta.outputs.tags }}-${{ steps.vars.outputs.platform }} # タグを指定
          # tags: ${{ env.PACKAGE }}-${{ steps.vars.outputs.platform }}:${{ github.ref_name }} # タグを指定
          push: true # ghcrにPush
          cache-from: type=local,src=/tmp/.ubuntu-dev-cache-${{ github.sha }} # キャッシュを指定
          cache-to: type=local,dest=/tmp/.ubuntu-dev-new-cache-${{ github.sha }} # キャッシュ更新
          # labels: ${{ steps.meta.outputs.labels }}
          # annotations: ${{ steps.meta.outputs.annotations }}
          # output: image=ghcr.io/${{ github.repository }}/ubuntu-dev:${{ github.ref_name }}-${{ steps.vars.outputs.platform }}

      - name: docker compose test
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: ".devcontainer/docker-compose.yaml"

      # キャッシュを更新
      - name: Update cache
        run: |
          rm -rf /tmp/.ubuntu-dev-cache-${{ github.sha }}
          mv /tmp/.ubuntu-dev-new-cache-${{ github.sha }} /tmp/.ubuntu-dev-cache-${{ github.sha }}

      # cloud-initのチェック
      # - uses: anderssonPeter/cloud-init-linter@v1
      #   with:
      #     files: |
      #       cloud-init/multipass.yaml
      #       cloud-init/user-data
      #       cloud-init/network-config

  # release:
  #   runs-on: ubuntu-24.04
  #   needs: build

  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Create GHCR manifest
  #       run: |
  #         docker manifest create ${{ env.PACKAGE }}:${{ github.ref_name }} \
  #           --amend ${{ env.PACKAGE }}-linux-amd64:${{ github.ref_name }} \
  #           --amend ${{ env.PACKAGE }}-linux-arm64:${{ github.ref_name }}

  #     - name: Push manifests
  #       run: |
  #         docker manifest push ${{ env.PACKAGE }}:${{ github.ref_name }}

  ubuntu-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: make
        run: make sense

  mac-test:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: make
        run: make sense

  windows-test:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      - uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04

      - shell: wsl-bash {0}
        run: |
          ls -la
          uname -a
