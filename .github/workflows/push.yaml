name: Push to ghcr
on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  workflow_dispatch:

  schedule:
    # 日本時間(UTC+9) 16:20に実行
    - cron: "20 7 * * *"

env:
  REGISTRY_IMAGE: ghcr.io/budybye/ubuntu-dev

jobs:
  build:
    # 3時間
    timeout-minutes: 180
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        flavor:
          - name: slim
          - name: dev
        include:
          # ARM64ビルド用の設定
          - platform: linux/arm64
            runs-on: ubuntu-24.04-arm
          # AMD64ビルド用の設定
          - platform: linux/amd64
            runs-on: ubuntu-24.04
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "ARCH=${platform#linux/}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Docker meta
        if: matrix.flavor.name == 'slim'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=sha,prefix=${{ github.ref_name }}-${{ env.PLATFORM_PAIR }}
          labels: |
            org.opencontainers.image.description=${{ matrix.platform }}
          annotations: |
            org.opencontainers.image.source=https://github.com/budybye/ubuntu-dev
            org.opencontainers.image.documentation=https://github.com/budybye/ubuntu-dev/blob/main/README.md

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          use: true

      - name: clean space
        # if: matrix.platform == 'linux/amd64'
        run: |
          echo "=== クリーンアップ開始 ==="
          echo "初期状態のディスク使用量:"
          df -h
          echo "メモリ使用量:"
          free -h
          echo "大きなディレクトリの分析:"
          du -sh /* 2>/dev/null | sort -hr | head -10 || true
          echo "Docker使用量:"
          docker system df || true

          # 初期ディスク使用量を記録
          INITIAL_DISK=$(df / | awk 'NR==2 {print $3}')
          echo "初期ディスク使用量: ${INITIAL_DISK}KB"

          # Docker関連のクリーンアップ
          echo "Docker関連のクリーンアップ..."
          docker system prune --all --force --volumes || true
          docker image prune --all --force || true
          docker container prune --force || true
          docker volume prune --force || true
          docker network prune --force || true

          # システムディレクトリのクリーンアップ（存在する場合のみ）
          echo "システムディレクトリのクリーンアップ..."
          for dir in /opt /usr/share/dotnet /usr/local/lib/android /usr/local/share/boost $AGENT_TOOLSDIRECTORY \
                     /usr/local/share/chromium /usr/local/share/powershell /usr/local/share/swift \
                     /usr/local/share/rust /usr/local/share/go /usr/local/share/node /usr/local/share/python \
                     /usr/local/share/ruby /usr/local/share/php /usr/local/share/java /usr/local/share/maven \
                     /usr/local/share/gradle /usr/local/share/sbt /usr/local/share/cargo /usr/local/share/npm \
                     /usr/local/share/yarn /usr/local/share/pip /usr/local/share/gem /usr/local/share/composer \
                     /usr/local/share/conda /usr/local/share/pyenv /usr/local/share/nvm /usr/local/share/rbenv \
                     /usr/local/share/gvm /usr/local/share/sdkman /usr/local/share/asdf /usr/local/share/mise \
                     /usr/local/share/rtx /usr/local/share/volta /usr/local/share/fnm /usr/local/share/n \
                     /usr/local/share/nodenv /usr/local/share/pipenv /usr/local/share/poetry /usr/local/share/pipx \
                     /usr/local/share/pip-tools /usr/local/share/pipdeptree /usr/local/share/pip-review \
                     /usr/local/share/pip-autoremove /usr/local/share/pip-check /usr/local/share/pip-download \
                     /usr/local/share/pip-install /usr/local/share/pip-list /usr/local/share/pip-show \
                     /usr/local/share/pip-search /usr/local/share/pip-freeze /usr/local/share/pip-wheel \
                     /usr/local/share/pip-hash /usr/local/share/pip-cache /usr/local/share/pip-config \
                     /usr/local/share/pip-debug /usr/local/share/pip-help /usr/local/share/pip-version \
                     /usr/local/share/pip-completion /usr/local/share/pip-bash-completion /usr/local/share/pip-zsh-completion \
                     /usr/local/share/pip-fish-completion /usr/local/share/pip-powershell-completion /usr/local/share/pip-tcsh-completion \
                     /usr/local/share/pip-csh-completion /usr/local/share/pip-ksh-completion /usr/local/share/pip-dash-completion \
                     /usr/local/share/pip-bash /usr/local/share/pip-zsh /usr/local/share/pip-fish /usr/local/share/pip-powershell \
                     /usr/local/share/pip-tcsh /usr/local/share/pip-csh /usr/local/share/pip-ksh /usr/local/share/pip-dash \
                     /usr/local/share/pip-posh /usr/local/share/pip-xonsh /usr/local/share/pip-elvish /usr/local/share/pip-nushell \
                     /usr/local/share/pip-ion /usr/local/share/pip-murex /usr/local/share/pip-rc /usr/local/share/pip-es \
                     /usr/local/share/pip-aksh /usr/local/share/pip-ksh93 /usr/local/share/pip-ksh2020 /usr/local/share/pip-mksh \
                     /usr/local/share/pip-oksh /usr/local/share/pip-lksh /usr/local/share/pip-pdksh; do
            if [ -d "$dir" ]; then
              echo "削除中: $dir"
              sudo rm -rf "$dir" || true
            fi
          done

          # パッケージマネージャーのクリーンアップ
          echo "パッケージマネージャーのクリーンアップ..."

          # アーキテクチャに応じたパッケージ削除
          ARCH=$(uname -m)
          echo "現在のアーキテクチャ: $ARCH"

          if [ "$ARCH" = "x86_64" ]; then
            echo "x86_64環境用のパッケージ削除..."
            sudo apt purge -y \
              ansible* \
              aria2* \
              aspnetcore* \
              apache2* \
              azure-cli* \
              cabal* \
              clang* \
              dotnet-* \
              firefox* \
              gfortran-* \
              ghc* \
              google-chrome-stable* \
              google-cloud-sdk* \
              imagemagick* \
              javascript* \
              kubectl* \
              llvm* \
              mono* \
              moby* \
              mysql* \
              nginx* \
              node* \
              npm* \
              nuget* \
              php* \
              postgresql* \
              powershell* \
              rpm* \
              ruby* \
              sqlite3* \
              subversion \
              temurin* \
              tmux* \
              vim* \
              yarn* \
              # 追加の不要パッケージ
              ant* \
              awscli* \
              azure* \
              bower* \
              bzip2* \
              cabal* \
              cmake* \
              codeql* \
              composer* \
              conda* \
              crystal* \
              dart* \
              deno* \
              elixir* \
              erlang* \
              fsharp* \
              gcc* \
              gdb* \
              git-lfs* \
              gradle* \
              groovy* \
              haskell* \
              helm* \
              hugo* \
              jekyll* \
              julia* \
              kotlin* \
              leiningen* \
              maven* \
              mercurial* \
              miniconda* \
              ocaml* \
              opam* \
              packer* \
              pandoc* \
              perl* \
              pip* \
              pipx* \
              pypy* \
              python* \
              r* \
              racket* \
              rust* \
              sbt* \
              scala* \
              sdkman* \
              stack* \
              swift* \
              terraform* \
              vagrant* \
              virtualbox* \
              vscode* \
              xvfb* \
              zsh* || true
          else
            echo "ARM64環境用のパッケージ削除（Google Chrome/Cloud SDK除外）..."
            sudo apt purge -y \
              ansible* \
              aria2* \
              aspnetcore* \
              apache2* \
              azure-cli* \
              cabal* \
              clang* \
              dotnet-* \
              firefox* \
              gfortran-* \
              ghc* \
              imagemagick* \
              javascript* \
              kubectl* \
              llvm* \
              mono* \
              moby* \
              mysql* \
              nginx* \
              node* \
              npm* \
              nuget* \
              php* \
              postgresql* \
              powershell* \
              rpm* \
              ruby* \
              sqlite3* \
              subversion \
              temurin* \
              tmux* \
              vim* \
              yarn* \
              # 追加の不要パッケージ（ARM64対応）
              ant* \
              awscli* \
              azure* \
              bower* \
              bzip2* \
              cabal* \
              cmake* \
              codeql* \
              composer* \
              conda* \
              crystal* \
              dart* \
              deno* \
              elixir* \
              erlang* \
              fsharp* \
              gcc* \
              gdb* \
              git-lfs* \
              gradle* \
              groovy* \
              haskell* \
              helm* \
              hugo* \
              jekyll* \
              julia* \
              kotlin* \
              leiningen* \
              maven* \
              mercurial* \
              miniconda* \
              ocaml* \
              opam* \
              packer* \
              pandoc* \
              perl* \
              pip* \
              pipx* \
              pypy* \
              python* \
              r* \
              racket* \
              rust* \
              sbt* \
              scala* \
              sdkman* \
              stack* \
              swift* \
              terraform* \
              vagrant* \
              virtualbox* \
              vscode* \
              xvfb* \
              zsh* || true
          fi

          # 個別パッケージの安全な削除（エラーが発生しやすいパッケージ）
          echo "個別パッケージの安全な削除..."
          for pkg in google-chrome-stable google-cloud-sdk firefox powershell; do
            if dpkg -l | grep -q "^ii.*$pkg"; then
              echo "削除中: $pkg"
              sudo apt purge -y "$pkg"* || true
            else
              echo "スキップ: $pkg (インストールされていません)"
            fi
          done

          # ARM64環境での追加の最適化
          if [ "$ARCH" != "x86_64" ]; then
            echo "ARM64環境での追加最適化..."
            # ARM64環境で利用できない可能性のあるパッケージを個別にチェック
            ARM64_SKIP_PACKAGES="google-chrome-stable google-cloud-sdk firefox powershell virtualbox"
            for pkg in $ARM64_SKIP_PACKAGES; do
              if dpkg -l | grep -q "^ii.*$pkg"; then
                echo "ARM64環境で削除を試行: $pkg"
                sudo apt purge -y "$pkg"* 2>/dev/null || echo "削除に失敗: $pkg (スキップ)"
              fi
            done
          fi

          # キャッシュとログのクリーンアップ
          echo "キャッシュとログのクリーンアップ..."
          for cache_dir in /var/cache/apt/archives /var/lib/apt/lists /var/log /tmp /var/tmp \
                          ~/.cache ~/.local/share ~/.npm ~/.yarn ~/.pip ~/.gem ~/.cargo ~/.m2 \
                          ~/.gradle ~/.sbt ~/.composer ~/.conda ~/.pyenv ~/.nvm ~/.rbenv ~/.gvm \
                          ~/.sdkman ~/.asdf ~/.mise ~/.rtx ~/.volta ~/.fnm ~/.n ~/.nodenv \
                          ~/.pipenv ~/.poetry ~/.pipx ~/.pip-tools ~/.pipdeptree ~/.pip-review \
                          ~/.pip-autoremove ~/.pip-check ~/.pip-download ~/.pip-install ~/.pip-list \
                          ~/.pip-show ~/.pip-search ~/.pip-freeze ~/.pip-wheel ~/.pip-hash ~/.pip-cache \
                          ~/.pip-config ~/.pip-debug ~/.pip-help ~/.pip-version ~/.pip-completion \
                          ~/.pip-bash-completion ~/.pip-zsh-completion ~/.pip-fish-completion \
                          ~/.pip-powershell-completion ~/.pip-tcsh-completion ~/.pip-csh-completion \
                          ~/.pip-ksh-completion ~/.pip-dash-completion ~/.pip-bash ~/.pip-zsh ~/.pip-fish \
                          ~/.pip-powershell ~/.pip-tcsh ~/.pip-csh ~/.pip-ksh ~/.pip-dash ~/.pip-posh \
                          ~/.pip-xonsh ~/.pip-elvish ~/.pip-nushell ~/.pip-ion ~/.pip-murex ~/.pip-rc \
                          ~/.pip-es ~/.pip-aksh ~/.pip-ksh93 ~/.pip-ksh2020 ~/.pip-mksh ~/.pip-oksh \
                          ~/.pip-lksh ~/.pip-pdksh; do
            if [ -d "$cache_dir" ]; then
              echo "キャッシュ削除中: $cache_dir"
              sudo rm -rf "$cache_dir"/* || true
            fi
          done

          # システムの最適化
          echo "システムの最適化..."
          sudo apt-get autoremove -y >/dev/null 2>&1 || true
          sudo apt-get autoclean -y >/dev/null 2>&1 || true
          sudo apt-get clean -y >/dev/null 2>&1 || true

          # 追加の最適化
          echo "追加の最適化..."
          # ログファイルの圧縮
          sudo find /var/log -name "*.log" -size +1M -exec gzip {} \; || true
          sudo find /var/log -name "*.log.*" -size +1M -exec gzip {} \; || true

          # 古いログファイルの削除
          sudo find /var/log -name "*.log.*" -mtime +7 -delete || true
          sudo find /var/log -name "*.gz" -mtime +30 -delete || true

          # 一時ファイルの削除
          sudo find /tmp -type f -mtime +1 -delete || true
          sudo find /var/tmp -type f -mtime +1 -delete || true

          # 空のディレクトリの削除
          sudo find /tmp -type d -empty -delete || true
          sudo find /var/tmp -type d -empty -delete || true

          # メモリの最適化
          echo "メモリの最適化..."
          sudo sync
          echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true

          # 最終ディスク使用量を記録
          FINAL_DISK=$(df / | awk 'NR==2 {print $3}')
          SAVED_SPACE=$((INITIAL_DISK - FINAL_DISK))
          echo "クリーンアップで節約された容量: ${SAVED_SPACE}KB (約 $((SAVED_SPACE / 1024))MB)"

          # メモリとディスク使用量の確認
          echo "=== クリーンアップ完了 ==="
          echo "最終状態のディスク使用量:"
          df -h
          echo "メモリ使用量:"
          free -h
          echo "大きなディレクトリの分析:"
          du -sh /* 2>/dev/null | sort -hr | head -10 || true
          echo "Docker使用量:"
          docker system df || true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        if: matrix.flavor.name == 'slim'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .devcontainer
          platforms: ${{ matrix.platform }}
          cache-from: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}
          cache-to: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }},mode=max
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Set slim digest
        if: matrix.flavor.name == 'slim'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Build devcontainer
        if: matrix.flavor.name == 'dev'
        id: devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.REGISTRY_IMAGE }}
          imageTag: ${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          cacheFrom: ${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          push: never
          # runCmd: |
          #   env
          #   uname -a

      - name: Dev push by digest
        if: matrix.flavor.name == 'dev'
        run: |
          /usr/bin/docker push ${{ env.REGISTRY_IMAGE }}:${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }} | \
          grep digest | \
          sed -n 's/^.*digest: sha256:\([a-f0-9]*\).*$/\1/p' > /tmp/devcontainer-cache

      - name: Set devcontainer digest
        if: matrix.flavor.name == 'dev'
        run: |
          mkdir -p /tmp/digests
          digest=$(cat /tmp/devcontainer-cache)
          touch "/tmp/digests/${digest}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}-${{ matrix.flavor.name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Docker compose action
        if: matrix.flavor.name == 'slim'
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: .devcontainer/compose.yaml
          services: |
            ubuntu

      - name: Docker compose test
        if: matrix.flavor.name == 'slim'
        run: |
          docker ps -a

  merge:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      packages: write
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        flavor:
          - name: dev
          - name: slim
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*-${{ matrix.flavor.name }}
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        if: matrix.flavor.name == 'slim'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # slim latest か main にマージされる
      - name: Create manifest list and push
        if: matrix.flavor.name == 'slim'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

          # マニフェストリストを確認
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

      - name: dev Create manifest list and push
        if: matrix.flavor.name == 'dev'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ matrix.flavor.name }} \
           $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ matrix.flavor.name }}
