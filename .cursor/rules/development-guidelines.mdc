---
description:
globs:
alwaysApply: false
---
# Chezmoi Dotfiles Development Guidelines

## Editor Configuration

### VSCode Configuration
- Manage VSCode settings and extensions via [.vscode/](mdc:.vscode) directory
- [extensions.json](mdc:.vscode/extensions.json): Recommended extensions for optimal development environment
- Automatically apply consistent development environment through workspace settings

### Cursor Configuration
- Manage AI behavior customization files via [.cursor/rules/](mdc:.cursor/rules) directory
- [always-refer.mdc](mdc:.cursor/rules/always-refer.mdc): Documentation reference guidelines
- [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc): Project organization guide
- [package-management.mdc](mdc:.cursor/rules/package-management.mdc): Package management strategy
- [development-guidelines.mdc](mdc:.cursor/rules/development-guidelines.mdc): This development guide

## Code Style and Standards

### Editor Configuration
- Define basic code style across all editors with [.editorconfig](mdc:.editorconfig)
- **Indentation**: 2 spaces for YAML, JSON, and configuration files
- **Character Encoding**: UTF-8 without BOM
- **Line Endings**: LF (Unix style)
- **Trailing Whitespace**: Automatically removed

### Chezmoi Template Files
- Templates identified by `.tmpl` extension
- Utilize sprig function library extending Go text/template
- Use `{{ if eq .chezmoi.os "darwin" }}` pattern for OS-specific configuration
- Use `{{ env "VAR_NAME" }}` for environment variable access
- Leverage password manager integration with `{{ bitwarden "item" "name" }}` etc.

### Shell Scripts
- Use `#!/bin/bash` as shebang for compatibility
- Reference variables with `${VAR}` format for clarity
- Implement proper error handling with `set -euo pipefail`
- Follow [Google Shell Style Guide](https://google.github.io/styleguide/shellguide.html)
- Validate scripts with `shellcheck` before committing

### YAML Files
- Consistently use 2-space indentation
- Quote strings containing special characters
- Maintain consistent structure across similar files
- Validate with tools like `yamllint`

### Makefile Best Practices
- Use `:=` for variable assignment to avoid recursive expansion
- Document all targets with `## Description` comments
- Group related targets with category headers (`##@ Category`)
- Use `.PHONY` for all non-file targets
- Implement error handling with `|| true` where appropriate

## Chezmoi Workflow

### Daily Operations
```sh
# Edit configuration files (with transparent encryption support)
chezmoi edit ~/.ssh/config

# Preview changes
chezmoi diff

# Apply changes
chezmoi apply

# Navigate to source directory
chezmoi cd

# Check configuration health
chezmoi doctor
```

### File Management
```sh
# Add new configuration file
chezmoi add ~/.gitconfig

# Add as template
chezmoi add --template ~/.ssh/config

# Add as encrypted file
chezmoi add --encrypt ~/.ssh/private_key

# Add as executable file
chezmoi add --executable ~/.local/bin/script
```

### External File Management
Manage external resources with `.chezmoiexternal.toml.tmpl`:
```toml
# Fetch latest binary from GitHub release
[".local/bin/age"]
    type = "archive-file"
    url = {{ gitHubLatestReleaseAssetURL "FiloSottile/age" (printf "age-*-%s-%s.tar.gz" .chezmoi.os .chezmoi.arch) | quote }}
    executable = true
    path = "age/age"

# Oh My Zsh management
[".oh-my-zsh"]
    type = "archive"
    url = "https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz"
    exact = true
    stripComponents = 1
    refreshPeriod = "168h"
```

## Version Control

### Git Configuration
- Specify files to ignore in version control with [.gitignore](mdc:.gitignore)
- Use descriptive commit messages following conventional format
- Use feature branches for development work
- Rebase regularly to keep history clean

### Branching Strategy
- `main` branch for stable releases and production-ready code
- Feature branches for new development work
- Merge regularly to avoid long-lived branches
- Tag releases following semantic versioning

### Makefile Git Commands
```sh
# Interactive commit with custom message
make git-commit

# Quick status check
make git-status
```

## Development Environment

### Container Development
- Define complete development environment with [.devcontainer/](mdc:.devcontainer)
- [Dockerfile](mdc:.devcontainer/Dockerfile): Container image definition
- [devcontainer.json](mdc:.devcontainer/devcontainer.json): VS Code container configuration
- [docker-compose.yaml](mdc:.devcontainer/docker-compose.yaml): Multi-service orchestration

### Local Development Setup
```sh
# Initialize development environment
make init

# Check configuration consistency
make check

# Update to latest versions
make update
```

### Virtual Machine Development
```sh
# Create standardized Ubuntu VM
make vm-create

# Connect to development VM
make ssh

# VM lifecycle management
make vm-start
make vm-stop
make vm-info
```

## Testing and Quality Assurance

### Automated Testing
- Continuous integration with [GitHub Actions](mdc:.github/workflows)
- Multi-platform testing (macOS, Ubuntu, Docker)
- Automated builds and releases

### Local Testing
```sh
# Run configuration checks
make check

# Test in isolated Docker environment
make docker-run

# Validate chezmoi configuration
chezmoi diff
chezmoi doctor
chezmoi verify
```

### Code Quality Tools
- **ShellCheck**: Validate shell scripts for common issues
- **yamllint**: Validate YAML syntax and style
- **markdownlint**: Ensure consistent markdown formatting
- **editorconfig-checker**: Verify editor configuration compliance

## Package Management

### Homebrew (macOS)
- [Brewfile](mdc:home/private_dot_config/Brewfile): Declarative package management
- Regular updates with `brew update && brew upgrade`
- Bundle management with `brew bundle --file=path/to/Brewfile`

### Mise/ASDF Runtime Management
- [.tool-versions](mdc:.tool-versions): Language runtime versions
- [mise configuration](mdc:home/private_dot_config/mise): Tool-specific configuration
- Environment-specific tools with directory-level `.tool-versions`

### System Package Management
- Ubuntu: APT package management via installation scripts
- Snap packages for cross-distribution compatibility
- Document dependencies in setup scripts

### Package Data Management
Define OS-specific packages in [packages.yaml](mdc:home/.chezmoidata/packages.yaml):
```yaml
packages:
  darwin:
    formula: ['git', 'curl', 'vim']
    cask: ['alacritty', 'cursor']
  linux:
    apt: ['git', 'curl', 'vim']
    snap: ['code']
  mise: ['node@latest', 'python@latest']
```

## Security and Encryption

### Age Encryption
```sh
# Generate new encryption key
make age-keygen

# Encrypt sensitive files with chezmoi
chezmoi add --encrypt ~/.ssh/private_key

# Passphrase symmetric encryption
age --armor --passphrase | age --decrypt --output key.txt
```

### Bitwarden Integration
```sh
# Unlock vault for secret management
make bw-unlock

# Secure secret injection with chezmoi integration
{{ bitwarden "item" "name" }}
```

### 1Password Integration
```toml
# Configuration example in .chezmoi.toml.tmpl
[data]
    github_token = {{ onepassword "vault" "item" "password" }}
```

## Error Handling and Debugging

### Common Issues
1. **Template syntax errors**: Check Go template syntax and sprig functions
2. **Encryption issues**: Verify age key configuration and environment
3. **Permission problems**: Check file attributes and umask settings
4. **Path resolution**: Verify template paths and external file URLs

### Debugging Tools
```sh
# Verbose output for troubleshooting
chezmoi apply --verbose

# Dry run to preview changes
chezmoi apply --dry-run

# Debug template execution
chezmoi execute-template < template.tmpl

# Verify external file sources
chezmoi managed
```

### Best Practices for Reliability
1. **Always test changes** in isolated environment first
2. **Use version control** for all configuration changes
3. **Backup sensitive data** before major changes
4. **Document custom modifications** for future reference
5. **Regular maintenance** of external dependencies
