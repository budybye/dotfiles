---
description:
globs:
alwaysApply: false
---
# Package Management Guide

## Package Management Systems

### Homebrew (macOS)
[Brewfile](mdc:home/private_dot_config/Brewfile) manages packages in the following categories:

#### Formulae (Command Line Tools)
- Development tools (git, vim, etc.)
- System utilities (bat, fzf, etc.)
- Network tools (nmap, whois, etc.)

#### Applications (Cask)
- Development environment (VSCode, Cursor, etc.)
- Browsers (Brave, Chrome, etc.)
- Utilities (AppCleaner, Rectangle, etc.)
- Fonts (HackGen Nerd, etc.)

#### Mac App Store (mas)
- Productivity apps (Microsoft Excel, etc.)
- Development tools (Xcode, etc.)
- Utilities (LINE, Shazam, etc.)

### Mise (Runtime Management)
- [.tool-versions](mdc:.tool-versions): Version management for programming languages
- Node.js version management
- Other runtime version management

### APT (Ubuntu/Debian)
- System packages managed through installation scripts
- Development dependencies
- GUI applications for Linux

## Package Addition Guidelines

### Homebrew Packages
1. Add new packages to the appropriate section in Brewfile
2. Commented packages are preserved for future use
3. Add descriptive comments for packages
4. Manage related packages together

### Runtime Versions
1. Use `.tool-versions` for version management
2. Specify exact versions for reproducibility
3. Test compatibility across different environments

### System Packages
1. Document dependencies in installation scripts
2. Check package availability across different OS versions
3. Provide fallback options when possible

## Best Practices

### Security
1. Regularly run `brew update` and `brew upgrade`
2. Keep runtime versions updated for security patches
3. Verify package sources and maintainers

### Maintenance
1. Remove unused packages appropriately
2. Use version management for reproducible environments
3. Document package purposes and dependencies
4. Test installation scripts regularly

### Cross-Platform Compatibility
1. Use OS-specific templates when necessary
2. Provide alternatives for different platforms
3. Test installations on different OS versions
