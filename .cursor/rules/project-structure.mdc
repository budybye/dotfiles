---
description:
globs:
alwaysApply: false
---

# Chezmoi Dotfiles Management Project Structure Guide

This project is a dotfile management system using chezmoi. Built based on [twpayne/dotfiles](https://github.com/twpayne/dotfiles) and chezmoi best practices.

## Main Directories and Files

### Core Directories

- `home/`: Home directory configuration files (chezmoi source state)
- `.chezmoiroot`: Chezmoi root directory marker (points to `home`)
- `.tool-versions`: mise/asdf compatible version management file

### Development Environment

- `.devcontainer/`: Development container configuration
- `.vscode/`: VSCode configuration
- `.cursor/`: Cursor AI configuration and development guidelines
- `.editorconfig`: Editor configuration (follows project standards)

### CI/CD & Deployment

- `.github/`: GitHub-related configuration (workflows, releases)
- `cloud-init/`: Cloud initialization scripts for VM deployment
- `Makefile`: Build and installation tasks organized by category
- `install.sh`: Initial setup script

### Documentation & Style

- `README.md`: Comprehensive project documentation
- `style.css`: Stylesheet for document rendering

## Important File Descriptions

### Chezmoi Configuration Files

- [.chezmoi.toml.tmpl](mdc:home/.chezmoi.toml.tmpl): Main chezmoi configuration template
- [.chezmoiexternal.toml.tmpl](mdc:home/.chezmoiexternal.toml.tmpl): External file and archive management
- [.chezmoiignore](mdc:home/.chezmoiignore): Files to ignore in chezmoi
- [.chezmoidata/](mdc:home/.chezmoidata/): Template variable data

### Package Management

- [Brewfile](mdc:home/private_dot_config/Brewfile): macOS Homebrew package management
- [packages.yaml](mdc:home/.chezmoidata/packages.yaml): OS-specific package definitions

### Build & Installation

- [Makefile](mdc:Makefile): Categorized task definitions and help system
- [install.sh](mdc:install.sh): Dotfile initialization script

## Chezmoi Directory Structure

### Home Directory Template Structure

Chezmoi embeds metadata in file names to automatically apply appropriate attributes:

#### File Attribute Prefixes

- `dot_*`: `dot_` prefix becomes dotfiles (e.g., `dot_zshrc` â†’ `.zshrc`)
- `private_*`: `private_` prefix for restricted permissions (0600)
- `encrypted_*`: `encrypted_` prefix for age encryption
- `executable_*`: `executable_` prefix for executable scripts
- `symlink_*`: `symlink_` prefix for symbolic links
- `readonly_*`: `readonly_` prefix for read-only (0444)

#### Template Files

- `.tmpl` extension: Processed as chezmoi templates
- `.chezmoitemplates/`: Shared template components

### Script Directory Organization

Chezmoi automatically executes scripts in `.chezmoiscripts/`:

#### OS-Specific Scripts

- `darwin/`: macOS-specific scripts
- `linux/`: Linux-specific scripts
- `windows/`: Windows-specific scripts

#### Script Naming Conventions

- `run_*`: Execute during `chezmoi apply`
- `run_once_*`: Execute only once
- `run_onchange_*`: Execute when content changes
- `run_before_*`: Execute before file installation
- `run_after_*`: Execute after file installation

### External File Management (.chezmoiexternal)

Manage external resources with `.chezmoiexternal.toml.tmpl`:

#### Supported Types

- `file`: Download single file
- `archive`: Extract archive
- `archive-file`: Extract specific file from archive
- `git-repo`: Clone/update Git repository

#### Configuration Examples

```toml
[".vim/autoload/plug.vim"]
    type = "file"
    url = "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    refreshPeriod = "168h"

[".oh-my-zsh"]
    type = "archive"
    url = "https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz"
    exact = true
    stripComponents = 1
    refreshPeriod = "168h"
```

### Template Variable System

#### Built-in Variables

- OS-specific configuration: `{{ if eq .chezmoi.os "darwin" }}`
- Architecture configuration: `{{ .chezmoi.arch }}`
- User information: `{{ .chezmoi.username }}`
- Host information: `{{ .chezmoi.hostname }}`

#### Custom Data

- YAML/TOML/JSON files in `.chezmoidata/` directory
- `[data]` section in `.chezmoi.toml.tmpl`
- Environment variables: `{{ env "VAR_NAME" }}`

#### Password Manager Integration

```go
{{ bitwarden "item" "name" }}
{{ onepassword "vault" "item" "field" }}
{{ keepassxc "database" "entry" "attribute" }}
```

## Makefile Command Structure

Optimized Makefile provides categorized commands:

### Command Categories

1. **General Operations**: `help`, `version`, `init`, `update`, `apply`, `check`
2. **Docker**: `docker-build`, `docker-run`, `up`, `down`, `exec`, `logs`
3. **Virtual Machines**: `vm-create`, `vm-info`, `vm-start`, `vm-stop`, `ssh`
4. **Git Operations**: `git-commit`, `git-status`
5. **Security**: `age-keygen`, `bw-unlock`
6. **Cleanup**: `clean-docker`, `clean-vm`, `clean`
7. **Information Display**: `list-vms`, `list-containers`, `system-info`

### Usage Examples

```sh
# Display colorized help
make help

# Initialize dotfiles with progress feedback
make init

# Create and manage VMs with standardized configuration
make vm-create
```

## Development Guidelines

### File Organization Principles

1. **Configuration Classification**: Add new configurations to appropriate directories
2. **Package Management**: Use Brewfile for macOS, mise for runtime versions
3. **Script Management**: Place scripts in `.chezmoiscripts/` with proper naming
4. **Build Tasks**: Add new tasks to Makefile following category structure
5. **Template Utilization**: Use chezmoi templates for OS-specific configuration
6. **Security**: Secure storage of sensitive data with age or Bitwarden integration
7. **Documentation**: Update README.md and .cursor/rules when adding features

### Security Best Practices

- Protect sensitive files with age encryption
- Manage secrets with 1Password/Bitwarden
- Control sensitive file distribution with `.chezmoiignore`
- Safely inject environment-specific secrets via templates

### Cross-Platform Support

#### Fully Supported OS

- **macOS**: Full Homebrew integration
- **Ubuntu/Linux**: apt/snap package management
- **Docker**: Containerized development environment

#### Planned Platforms

- **Windows/WSL2**: Planned support for future releases
- **FreeBSD**: Considering support for lightweight virtual machines

## Testing and Validation

### Automated Testing

- **GitHub Actions**: Multi-platform automated testing
- **Local Testing**: Configuration validation with `make check`
- **Container Testing**: Isolated testing with `make docker-run`

### Quality Assurance Tools

- **shellcheck**: Validate shell scripts for common issues
- **yamllint**: YAML syntax and style validation
- **chezmoi doctor**: Chezmoi configuration health check
- **chezmoi diff**: Preview changes

## Best Practice References

This project is designed based on:

- [twpayne/dotfiles](https://github.com/twpayne/dotfiles): Chezmoi creator's dotfiles
- [chezmoi.io official documentation](https://chezmoi.io/): Official best practices
- [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/): Standard directory structure

## Advanced Configuration Patterns

### Conditional Configuration

```go
# Environment-based configuration
{{ if eq .chezmoi.hostname "work-laptop" }}
# Work-specific settings
{{ else if eq .chezmoi.hostname "personal-desktop" }}
# Personal settings
{{ end }}

# Feature flags
{{ if .features.development }}
# Development tools and aliases
{{ end }}
```

### Multi-Environment Support

```toml
# .chezmoi.toml.tmpl
[data]
    {{- if eq .chezmoi.hostname "work-laptop" }}
    profile = "work"
    git_email = {{ onepassword "Work" "git" "email" | quote }}
    {{- else }}
    profile = "personal"
    git_email = {{ bitwarden "personal" "git-email" | quote }}
    {{- end }}
```

### Dynamic External Resources

```toml
# Fetch different resources based on architecture
{{ $arch := .chezmoi.arch }}
{{ if eq $arch "arm64" }}
[".local/bin/tool"]
    url = "https://releases.com/tool-arm64.tar.gz"
{{ else }}
[".local/bin/tool"]
    url = "https://releases.com/tool-amd64.tar.gz"
{{ end }}
```

### Custom Template Functions

```go
# Use custom data for configuration
{{ .packages.development | toJson }}
{{ .aliases | keys | sortAlpha }}
{{ printf "%s@%s" .tool.name .tool.version }}
```

## Maintenance and Monitoring

### Regular Maintenance Tasks

- Monthly dependency updates
- Review and clean unused packages
- Verify backup and recovery procedures
- Security audit of encrypted files

### Health Monitoring

```sh
# Comprehensive system information
make system-info

# Resource listing
make list-containers
make list-vms

# Chezmoi-specific health checks
chezmoi doctor
chezmoi verify
chezmoi unmanaged
```
