---
description:
globs:
alwaysApply: false
---
# Reference Guidelines

## Document Priority

1. Project-specific documents
   - [README.md](mdc:README.md)
   - [.cursorrules](mdc:.cursorrules)
   - [Makefile](mdc:Makefile)
   - [install.sh](mdc:install.sh)

2. Framework and library documentation
   - [chezmoi official documentation](mdc:https:/www.chezmoi.io/user-guide/command-overview)
   - [Homebrew official documentation](mdc:https:/docs.brew.sh)
   - [VSCode official documentation](mdc:https:/code.visualstudio.com/docs)
   - [Cursor official documentation](mdc:https:/cursor.sh/docs)

3. General specifications and standards
   - [EditorConfig specification](mdc:https:/editorconfig.org)
   - [Git official documentation](mdc:https:/git-scm.com/doc)
   - [Shell Scripting Best Practices](mdc:https:/google.github.io/styleguide/shellguide.html)

## Documentation Usage

### Reference Rules
1. Prioritize project-specific documents
2. Refer to the latest version of framework documentation
3. Use the latest stable version for general specifications

### Documentation Updates
1. Regularly check for updates to referenced documents
2. Handle breaking changes appropriately
3. Avoid using deprecated features

### Documentation Validation
1. Confirm that referenced documents are valid
2. Check version compatibility
3. Prioritize security-related updates

## Reference Document Management

### Addition Rules
1. Only add documents that are highly related
2. Note version information
3. Record update time

### Maintenance
1. Regularly check the validity of links
2. Update old version documents
3. Remove unnecessary references

## Documentation Structuring

### Category Division
1. Project-specific
2. Framework
3. Library
4. Tool
5. Specification
6. Best Practices

### Format
```markdown
## Category Name
- [Title](mdc:URL) - Version - Last Updated Date
  - Brief Description
  - Main Usage
  - Notes
```

## Reference Document Usage Example

### When Generating Code
1. Check project conventions
2. Check framework constraints
3. Apply Best Practices

### When Reviewing Code
1. Confirm consistency with coding conventions
2. Confirm consistency with security guidelines
3. Confirm consistency with performance guidelines
