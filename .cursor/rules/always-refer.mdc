---
description:
globs:
alwaysApply: false
---
# 参考文献ガイドライン

## ドキュメントの優先順位

1. プロジェクト固有のドキュメント
   - [README.md](mdc:README.md)
   - [.cursorrules](mdc:.cursorrules)
   - [Makefile](mdc:Makefile)
   - [install.sh](mdc:install.sh)

2. フレームワークとライブラリのドキュメント
   - [chezmoi公式ドキュメント](https://www.chezmoi.io/user-guide/command-overview/)
   - [Homebrew公式ドキュメント](https://docs.brew.sh/)
   - [VSCode公式ドキュメント](https://code.visualstudio.com/docs)
   - [Cursor公式ドキュメント](https://cursor.sh/docs)

3. 一般的な仕様と標準
   - [EditorConfig仕様](https://editorconfig.org/)
   - [Git公式ドキュメント](https://git-scm.com/doc)
   - [Shell Scripting Best Practices](https://google.github.io/styleguide/shellguide.html)

## ドキュメントの使用方法

### 参照時のルール
1. プロジェクト固有のドキュメントを最優先で参照
2. フレームワークの最新バージョンのドキュメントを参照
3. 一般的な仕様は最新の安定版を参照

### ドキュメントの更新
1. 定期的に参照ドキュメントの更新を確認
2. 破壊的変更がある場合は適切に対応
3. 非推奨機能の使用を避ける

### ドキュメントの検証
1. 参照先のドキュメントが有効であることを確認
2. バージョンの互換性を確認
3. セキュリティ関連の更新を優先

## 参考文献の管理

### 追加時のルール
1. 関連性の高いドキュメントのみを追加
2. バージョン情報を明記
3. 更新日時を記録

### メンテナンス
1. 定期的なリンクの有効性チェック
2. 古いバージョンのドキュメントの更新
3. 不要な参照の削除

## ドキュメントの構造化

### カテゴリ分け
1. プロジェクト固有
2. フレームワーク
3. ライブラリ
4. ツール
5. 仕様書
6. ベストプラクティス

### フォーマット
```markdown
## カテゴリ名
- [タイトル](URL) - バージョン - 最終更新日
  - 簡単な説明
  - 主な用途
  - 注意事項
```

## 参考文献の使用例

### コード生成時
1. プロジェクトの規約を確認
2. フレームワークの制約を確認
3. ベストプラクティスを適用

### コードレビュー時
1. コーディング規約との整合性を確認
2. セキュリティガイドラインとの整合性を確認
3. パフォーマンスガイドラインとの整合性を確認
