#! /usr/bin/env bash

echo "--------------------------------"
echo "OS: {{ .chezmoi.os | quote }}"
echo "desktop system setup"
echo "--------------------------------"

{{ if eq .chezmoi.os "darwin" -}}
    # コンピュータ名、ホスト名、ローカルホスト名、ユーザー名を設定
    #sudo scutil --set ComputerName "iCom"
    #sudo scutil --set HostName "101"
    #sudo scutil --set LocalHostName "101"
    #sudo scutil --set UserName "hotmilk"

    # (on マシンがフリーズしたら自動的にリスタート)
    systemsetup -setrestartfreeze on
    # スリープしない
    systemsetup -setcomputersleep Off > /dev/null 2>&1

    # Show the ~/Library directory （ライブラリディレクトリを表示、デフォルトは非表示）
    chflags nohidden ~/Library

    ## defaults による初期設定

    # ログイン画面でシステム情報を表示する
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
    # ダークモードをオンにする
    sudo defaults write /Library/Preferences/.GlobalPreferences AppleInterfaceTheme Dark
    # 時計アイコンクリック時に OS やホスト名 IP を表示する
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

    ## 他のMacで購入したアプリを自動的にダウンロードする
    #defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1

    # F1、F2などのキーを標準的なファンクションキーとして使用
    defaults write -g com.apple.keyboard.fnState -bool true
    # トラックパッドの動きを高速化
    defaults write -g com.apple.trackpad.scaling 3 && \
    # マウスの動きを高速化
    defaults write -g com.apple.mouse.scaling 1.5
    # キーリピートを早くする
    defaults write -g KeyRepeat -int 1 && \
    # キー入力の連打を有効化させる
    defaults write -g ApplePressAndHoldEnabled -bool false

    # 自動で隠す
    defaults write com.apple.dock autohide -bool true
    # dockの動作を素早くする
    defaults write com.apple.dock autohide-time-modifier -float 0.15
    # Dock が表示されるまでの待ち時間を無効にする
    defaults write com.apple.dock autohide-delay -float 0
    # Dockからアプリを起動するときのアニメーションを無効
    defaults write com.apple.dock launchanim -bool false
    # Automatically hide or show the Dock （Dock を自動的に隠す）
    defaults write com.apple.dock autohide -bool true
    # Wipe all app icons from the Dock （Dock に標準で入っている全てのアプリを消す、Finder とごみ箱は消えない）
    defaults write com.apple.dock persistent-apps -array
    # Dock Size
    defaults write com.apple.dock tilesize -int 50
    # Dock 拡大
    defaults write com.apple.dock magnification -bool true
    # Dock 拡大サイズ
    defaults write com.apple.dock largesize -int 123
    # ウィンドウをアプリケーションアイコンにしまう
    defaults write com.apple.dock minimize-to-application -bool true
    # 最近使ったアプリを Dock に表示しない
    defaults write com.apple.dock show-recents -bool false

    # Enable `Tap to click` （タップでクリックを有効にする）
    defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
    # 三本指でドラッグ
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -bool true && \
    defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true
    # フルスクリーンアプリケーション感をするために4本指でスワイプを有効にする
    defaults write com.apple.AppleMultitouchTrackpad.plist TrackpadFourFingerVertSwipeGesture -int 2 && \
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad.plist TrackpadFourFingerVertSwipeGesture -int 2
    # トラックパッドのナチュラルスクロールをオンにする
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool true
    # マウスの動きを高速化
    defaults write "Apple Global Domain" com.apple.mouse.scaling 4.0
    # トラックパッドの動きを高速化
    defaults write "Apple Global Domain" com.apple.trackpad.scaling 4.0

    # クラッシュレポートを無効化する
    defaults write com.apple.CrashReporter DialogType -string "none"
    # 未確認のアプリケーションを実行する際のダイアログを無効にする
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    # ダウンロードしたファイルを開くときの警告ダイアログをなくしたい
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    # 未確認のアプリケーションを実行する際のダイアログを無効にする
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    # ダイアログ表示やウィンドウリサイズ速度を高速化する
    defaults write -g NSWindowResizeTime 0.1
    # (保存ダイアログのデフォルト表示スタイル) -> true (常に詳細な情報を開いて表示)
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    # アクセントカラーをマルチカラーに設定する
    defaults write NSGlobalDomain AppleAccentColor -int -1
    # ウィンドウを開閉するときのアニメーションを無効
    defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
    # スペルの訂正を無効にする
    defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    # スクロールバーを常時表示する
    defaults write -g AppleShowScrollBars -string "Always"
    # ウィンドウサイズを調整する際の加速再生
    defaults write -g NSWindowResizeTime -float 0.001
    # Quick Lookウィンドウのアニメーションをオフ
    defaults write -g QLPanelAnimationDuration -float 0
    # テキストエディットをプレーンテキストで使う
    defaults write com.apple.TextEdit RichText -int 0
    # terminalでUTF-8のみを使用する
    defaults write com.apple.terminal StringEncodings -array 4
    # スクリーンショットをjpgで保存
    defaults write com.apple.screencapture type jpg
    # ネットワークディスクで、`.DS_Store` ファイルを作らない
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    # 日付表示設定、曜日を表示
    defaults write com.apple.menuextra.clock 'DateFormat' -string 'EEE H:mm'
    # Bluetooth ヘッドフォン・ヘッドセットの音質を向上させる
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

    # 全ての拡張子のファイルを表示する
    defaults write -g AppleShowAllExtensions -bool true
    # 新しいウィンドウでデフォルトでホームフォルダを開く
    defaults write com.apple.finder NewWindowTarget -string "PfDe"
    defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
    # 隠しファイルを常にファインダーに表示する
    defaults write com.apple.finder AppleShowAllFiles -bool true
    # Finder のタイトルバーにフルパスを表示する
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    # タブバーを表示する
    defaults write com.apple.finder ShowTabView -bool true
    # パスバーを表示する
    defaults write com.apple.finder ShowPathbar -bool true
    # ステータスバーを表示する
    defaults write com.apple.finder ShowStatusBar -bool true
    # 名前で並べ替えを選択時にディレクトリを前に置くようにする
    defaults write com.apple.finder _FXSortFoldersFirst -bool true
    # Finderで情報ウィンドウを開くときのアニメーションを無効
    defaults write com.apple.finder DisableAllAnimations -bool true
    # ゴミ箱を空にする前の警告の無効化
    defaults write com.apple.finder WarnOnEmptyTrash -bool false
    # 「新規フォルダ」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "新規フォルダ" -string "^k"
    # 「ここに項目を移動」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "ここに項目を移動" -string "@^v"
    # 「ゴミ箱に入れる」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "ゴミ箱に入れる" -string "^d"
    # 「情報を見る」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "情報を見る" -string "^l"

    # Spotlight検索を表示を無効化
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 64 "<dict><key>enabled</key><false/><key>value</key><dict><key>parameters</key><array><integer>65535</integer><integer>49</integer><integer>1048576</integer></array><key>type</key><string>standard</string></dict></dict>"
    # Finderの検索ウインドウを表示を無効化
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 65 "<dict><key>enabled</key><false/><key>value</key><dict><key>parameters</key><array><integer>65535</integer><integer>49</integer><integer>1572864</integer></array><key>type</key><string>standard</string></dict></dict>"
    # Spotlight検索を表示、Finderの検索ウインドウを表示が無効化になっているか確認する（64、65をチェックすること）
    defaults read com.apple.symbolichotkeys AppleSymbolicHotKeys

    # sudo networksetup -SetAirportPower en0 on
    # sudo networksetup -SetAirportNetwork en0 <SSID> <PASSWORD>
    # sudo networksetup -SetDNSServers Wi-Fi 1.1.1.1 1.0.0.1 192.168.0.1
    # sudo networksetup -SetV6Off Wi-Fi
    networksetup -ListNetworkServiceOrder
    nslookup apple.com

    echo 'Rebooting to reflect settings'

    # 再起動
    for app in "Dock" \
        "Finder" \
        "SystemUIServer"; do
        killall "${app}" > /dev/null 2>&1
    done

{{ else if eq .chezmoi.os "linux" -}}

    # ユーザー名を動的に取得
    USER_NAME=${SUDO_USER:-$(whoami)}
    # アーキテクチャを取得
    arch="$(dpkg --print-architecture)"

    # デスクトップ環境のインストール
    desktop_setup() {
        echo "desktop setup start..."
        sudo apt-get update -y && sudo apt-get upgrade -y
        sudo apt-get install -y {{ .packages.linux.gui | join " " }} || echo "desktop setup failed."
        #sudo apt-get remove -y light-locker xscreensaver &&
        sudo apt-get autoremove -y && sudo apt-get clean && sudo rm -rf /var/cache/apt /var/lib/apt/lists/*
        echo "desktop setup completed."
    }

    # Snap をインストールおよび管理する関数
    install_snap() {
        command -v snap >/dev/null || sudo apt-get install -y snapd || echo "snapd install failed."
        echo "snapd installed."

        command -v codium >/dev/null || sudo snap install codium --classic || echo "codium install failed."
        echo "codium installed."

        command -v speedtest >/dev/null || sudo snap install speedtest || echo "speedtest install failed."
        echo "speedtest installed."

        command -v alacritty >/dev/null || sudo snap install alacritty --classic || echo "alacritty install failed."
        echo "alacritty installed."

        if command -v firefox >/dev/null 2>&1; then
            sudo snap remove firefox || sudo apt remove firefox || echo "firefox uninstall failed."
        fi
        echo "firefox uninstalled."

        #command -v chromium >/dev/null || sudo snap install chromium || echo "chromium install failed."
        #echo "chromium installed."

        echo "snap tools installed."
    }

    # Brave ブラウザをインストールする関数
    install_brave_browser() {
        if ! command -v brave-browser >/dev/null 2>&1; then
            sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
            sudo apt-get update -y
            sudo apt-get install -y brave-browser || echo "brave browser install failed."
            echo "brave browser installed."
        else
            echo "brave browser already installed."
        fi
    }

    # Tabby Terminal をインストールする関数
    install_tabby_terminal() {
        if ! command -v tabby >/dev/null 2>&1; then
            curl https://packagecloud.io/install/repositories/eugeny/tabby/script.deb.sh | sudo bash
            sudo apt-get update -y
            sudo apt-get install -y tabby-terminal || echo "tabby terminal install failed."
            echo "tabby terminal installed."
        else
            echo "tabby terminal already installed."
        fi
    }

    # Cloudflare Warp をインストールおよび設定する関数
    install_cloudflare_warp() {
        if ! command -v warp-cli >/dev/null 2>&1; then
            sudo curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
            sudo apt-get update -y
            sudo apt-get install -y cloudflare-warp || echo "cloudflare warp install failed."
            echo "cloudflare warp installed."

            warp-cli --accept-tos registration new
            warp-cli --accept-tos mode warp
            warp-cli --accept-tos dns families malware
            warp-cli --accept-tos connect
            warp-cli --accept-tos disconnect
        else
            echo "cloudflare warp already installed."
        fi
    }

    # GitHub Desktop と Cursor をインストールする関数
    install_github_desktop() {
        if ! command -v github-desktop >/dev/null 2>&1; then
            sudo wget https://github.com/shiftkey/desktop/releases/download/release-3.4.3-linux1/GitHubDesktop-linux-${arch}-3.4.3-linux1.deb
            sudo dpkg -i GitHubDesktop-linux-${arch}-3.4.3-linux1.deb || echo "github desktop install failed."
            sudo rm -f GitHubDesktop-linux-${arch}-3.4.3-linux1.deb
            echo "github desktop installed."
        else
            echo "github desktop already installed."
        fi
    }

    # Cursor をインストールする関数
    install_cursor() {
        appimage="${HOME}/Applications/cursor"
        mkdir -p "${HOME}/Applications"
        if ! [ -f "${appimage}" ]; then
            if [ "${arch}" = "amd64" ]; then
                curl -L https://downloader.cursor.sh/inulx -o "${appimage}" || echo "cursor download failed."
            else
                curl -L https://github.com/coder/cursor-arm/releases/download/v0.42.2/cursor_0.42.2_linux_arm64.AppImage -o "${appimage}" || echo "cursor download failed."
            fi
        fi
        sudo chmod a+x "${appimage}"
        sudo apt-get install -y libfuse2 || echo "libfuse2 install failed."
        echo "${appimage} installed."
    }

    # Wireshark をインストールおよび設定する関数
    install_wireshark() {
        if ! command -v wireshark >/dev/null 2>&1; then
            sudo apt install -y wireshark || echo "wireshark install failed."
            sudo groupadd -f wireshark
            sudo usermod -aG wireshark "$USER_NAME"
            echo "wireshark installed."
        else
            echo "wireshark already installed."
        fi
    }

    # Ruby と Fusuma をインストールおよび設定する関数
    install_ruby_fusuma() {
        command -v gem >/dev/null || mise use ruby -y || sudo apt-get install -y ruby || echo "ruby install failed."
        echo "ruby installed."

        if ! command -v fusuma >/dev/null 2>&1; then
            sudo gem install fusuma || echo "fusuma install failed."
            sudo groupadd -f input
            sudo usermod -aG input "$USER_NAME"
            fusuma -d
            echo "fusuma installed."
        else
            echo "fusuma already installed."
        fi
    }

    # 日本語環境の設定
    japan_setup() {
        echo "japan setup start..."
        # CRDA設定ファイル内のREGDOMAINをJPに変更（存在しない場合は無視）
        sudo sed -i 's/^\s*REGDOMAIN=S*/REGDOMAIN=JP/' /etc/default/crda || true
        setupcon -k --force || true
        LANG=C xdg-user-dirs-update --force
        # 入力メソッドとしてfcitx5を設定
        im-config -n fcitx5
        echo "日本語環境の設定が完了しました。"
    }

    install_pipewire() {
        sudo apt-get install -y pipewire pipewire-audio libspa-0.2-dev libpipewire-0.3-dev autoconf libtool || echo "pipewire install failed."
        mkdir -p "${HOME}/.config/pipewire"
        if ! [ -d "${HOME}/.config/pipewire/pulseaudio-module-xrdp" ]; then
            git clone https://github.com/neutrinolabs/pulseaudio-module-xrdp.git "${HOME}/.config/pipewire/pulseaudio-module-xrdp"
            cd "${HOME}/.config/pipewire/pulseaudio-module-xrdp"
            ./bootstrap
            ./configure
            sudo make install
            cd "${HOME}"
        fi
        echo "pipewire installed."
    }

    # フォントをインストールする関数
    install_fonts() {
        # フォントディレクトリ
        fonts="${XDG_DATA_HOME:-$HOME/.local/share}/fonts"
        # フォントディレクトリを作成
        sudo mkdir -p "${fonts}"
        # HackGen フォントのダウンロード
        sudo curl -L https://github.com/yuru7/HackGen/releases/download/v2.9.0/HackGen_NF_v2.9.0.zip -o "${fonts}/HackGen_NF_v2.9.0.zip"
        # RobotoMonoJP フォントのダウンロード
        sudo curl -L https://github.com/mjun0812/RobotoMonoJP/releases/download/v5.9.0/RobotoMonoJP-Regular.ttf -o "${fonts}/RobotoMonoNF-Regular.ttf"
        # HackGen フォントの展開（ttfファイルのみをfontsディレクトリに配置）
        sudo unzip -j -o "${fonts}/HackGen_NF_v2.9.0.zip" '*.ttf' -d "${fonts}"
        # ダウンロードしたzipファイルの削除
        sudo rm -f "${fonts}/HackGen_NF_v2.9.0.zip"
        # フォントキャッシュの更新
        fc-cache -fv
        echo "fonts installed."
        tree "${fonts}"
    }

    # xrdpの設定
    xrdp_setup() {
        echo "xrdp setup start..."
        sudo groupadd -f ssl-cert
        sudo groupadd -f xrdp
        # ubuntuユーザーを必要なグループに追加
        sudo usermod -aG ssl-cert,xrdp,input,audio,sudo "${USER_NAME}"
        # サービスの再起動
        sudo systemctl daemon-reload
        sudo systemctl restart rsyslog
        # ファイアウォールで3389番ポート（RDP）を許可
        sudo ufw allow 3389
        # xrdpサービスを有効化し、起動
        sudo systemctl enable xrdp
        sudo systemctl start xrdp
        # デフォルトのセッションマネージャーをxfce4-sessionに設定
        sudo update-alternatives --set x-session-manager /usr/bin/xfce4-session
        echo "xrdp setup completed."

        echo "以下のコマンドを実行してパスワードを更新してください"
        echo "sudo passwd ${USER_NAME}"
    }

    setup() {
        echo "desktop setup start..."
        desktop_setup
        install_snap
        install_brave_browser
        install_tabby_terminal
        install_cloudflare_warp
        install_github_desktop
        install_cursor
        install_ruby_fusuma
        # install_wireshark
        install_pipewire
        # install_fonts
        japan_setup
        xrdp_setup
        echo "desktop setup completed."
    }
    setup

{{ end -}}

{{ if ne (env "GITHUB_ACTIONS") "true" -}}

{{ end -}}

echo "--------------------------------"
echo "desktop setup complete"
echo "--------------------------------"
