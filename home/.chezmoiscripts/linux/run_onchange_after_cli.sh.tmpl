#!/usr/bin/env bash

echo "run_onchange_after_cli.sh.tmpl"
echo "--------------------------------"

sudo=""
if [ "$(id -u)" -ne 0 ]; then
    sudo="sudo"
fi

# Zsh をデフォルトシェルに変更する関数
change_shell_to_zsh() {
    # zsh がインストールされているか確認
    if command -v zsh >/dev/null; then
        echo "zsh already installed."
    else
        $sudo apt-get install -y zsh || echo "zsh install failed." >> ${HOME}/which
    fi

    zsh_path=$(command -v zsh)
    if [ "${SHELL}" != "${zsh_path}" ]; then
        # デフォルトシェルを変更
        $sudo chsh -s "${zsh_path}" "$(whoami)" || echo "zsh default shell change failed."
    fi

    # シンボリックリンクを作成
    if [ ! -f /bin/zsh ] && [ -f /usr/bin/zsh ]; then
        $sudo ln -sf /usr/bin/zsh /bin/zsh
    fi

    echo "Your shell is ${SHELL}"
    echo "zsh default shell changed to ${zsh_path}."
    zsh --version >> ${HOME}/which || echo "zsh not found" >> ${HOME}/which
}

install_packages() {
    $sudo dpkg --configure -a
    apt --version
    $sudo apt-get update -y
    $sudo apt-get upgrade -y

    {{ range .packages.linux.cli -}}

    if ! dpkg -l | grep -q {{ . }}; then
        $sudo apt-get install -y {{ . }} && echo "{{ . }} installed." || \
        echo "{{ . }} install failed." >> ${HOME}/which
    else
        echo "{{ . }} already installed."
    fi

    {{ end }}

    $sudo apt-get autoremove -y
    $sudo apt-get autoclean -y
    $sudo rm -rf /var/cache/apt /var/lib/apt/lists/*
    $sudo apt-get check
    echo "apt install completed."
}

install_mise() {
    if command -v mise >/dev/null 2>&1; then
        echo "mise already installed."

    elif command -v curl >/dev/null 2>&1; then
        echo "mise install start..."
        curl https://mise.run | sh || echo "mise install failed."
    else
        echo "curl not found"
        $sudo install -dm 755 /etc/apt/keyrings
        wget -qO - https://mise.jdx.dev/gpg-key.pub | $sudo gpg --dearmor | $sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1>/dev/null
        echo "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=${dpkg --print-architecture}] https://mise.jdx.dev/deb stable main" | $sudo tee /etc/apt/sources.list.d/mise.list
        $sudo apt-get update -y
        $sudo apt-get install -y mise || echo "mise install failed."
    fi
    export PATH="${HOME}/.local/bin:${HOME}/.local/share/mise/shims:$PATH"
    mise --version >> ${HOME}/which || echo "mise not found" >> ${HOME}/which

    # ~/.config/mise/config.toml に記載されたパッケージをインストール
    mise install || echo "mise install failed." >> ${HOME}/which

    mise activate --shims
    mise activate bash
    mise list
    echo "mise setup completed."

    for cmd in go cargo npm node bun cargo-binstall python; do
        command -v "$cmd" >> ${HOME}/which || echo "$cmd not found" >> ${HOME}/which
    done
}

install_cargo_tools() {
    echo "cargo install start..."
    if command -v cargo >/dev/null; then
        echo "cargo already installed."

    else
        if command -v mise >/dev/null 2>&1; then
            mise use -g -y rust cargo-binstall

        elif command -v curl >/dev/null 2>&1; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || echo "cargo install failed."

        else
            echo "curl not found"
            $sudo apt-get install -y cargo || echo "cargo install failed."

        fi
        . ${HOME}/.cargo/env
        echo "cargo installed."
    fi
    cargo --version >> ${HOME}/which || echo "cargo not found" >> ${HOME}/which

    echo "cargo tools install start..."

    if command -v cargo-binstall >/dev/null; then
        echo "cargo-binstall already installed."

    elif command -v cargo >/dev/null; then
        cargo install cargo-binstall@1.6.9 --locked || echo "cargo tools install failed."

    elif command -v mise >/dev/null; then
        mise use -g -y rust cargo-binstall || echo "cargo tools install failed."

    else
        echo "cargo not found" >> ${HOME}/which
    fi

    # cargo-binstall -y starship sheldon fd-find xh bat lsd ripgrep || cargo install starship@1.20.1 fd-find@9.0.0 xh bat sheldon || echo "cargo tools install failed."
    cargo-binstall -y starship sheldon fd-find xh bat || cargo install starship@1.20.1 fd-find@9.0.0 xh bat sheldon || echo "cargo tools install failed."

    echo "cargo tools installed."

    for cmd in starship sheldon fd xh bat; do
        command -v "$cmd" >> ${HOME}/which || echo "$cmd not found" >> ${HOME}/which
    done
}

install_flatpak() {
    if command -v flatpak >/dev/null; then
        echo "flatpak already installed."
    else
        $sudo apt-get install -y flatpak || echo "flatpak install failed."
        $sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        echo "flatpak installed."
    fi
    flatpak --version >> ${HOME}/which || echo "flatpak not found" >> ${HOME}/which
}

install_go_aqua() {
    if command -v go >/dev/null; then
        echo "go already installed."

    elif command -v mise >/dev/null; then
        mise use -g -y go@1.23.2

    else
        $sudo apt-get install -y golang || echo "go install failed."

    fi
    go version >> ${HOME}/which || echo "go not found" >> ${HOME}/which


    if command -v aqua >/dev/null; then
        echo "aqua already installed."

    elif command -v go >/dev/null; then
        go install github.com/aquaproj/aqua/v2/cmd/aqua@latest || echo "aqua install failed."
        echo "$GOROOT"
    elif [ -d ${HOME}/.local/share/mise/shims/go ]; then
        ${HOME}/.local/share/mise/shims/go install github.com/aquaproj/aqua/v2/cmd/aqua@latest || echo "aqua install failed."

        # パスが通っていないので直接パスを指定
        export PATH="${HOME}/.local/share/mise/installs/go/1.23.2/bin:${PATH}"
        echo "aqua installed."
    else
        echo "go not found"
    fi

    aqua --version >> ${HOME}/which || echo "aqua not found" >> ${HOME}/which
}

install_mkcert() {
    echo "mkcert install start..."
    if command -v mkcert >/dev/null; then
        echo "mkcert already installed."

    elif command -v mise >/dev/null; then
        mise use -g mkcert -y || echo "mkcert install failed."

    else
        $sudo apt install -y mkcert || echo "mkcert install failed."
    fi

    mkcert -install
    mkcert --version >> ${HOME}/which || echo "mkcert not found" >> ${HOME}/which
}

echo "CLI tools install start..."
install_packages
change_shell_to_zsh
install_mise
install_cargo_tools
install_flatpak
install_go_aqua
install_mkcert

cat ${HOME}/which && rm -f ${HOME}/which
echo "--------------------------------"
echo "CLI tools install done."
echo "--------------------------------"
