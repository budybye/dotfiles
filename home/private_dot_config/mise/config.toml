[tools]
# `mise use -g`で設定できます
bun = "1.2.9"
node = "20.19.0"
go = "1.23.4"
rust = "1.83.0"
python = "3.13.3"

# java = "latest"
# deno = "latest"
# pnpm = "latest"
# php = "latest"
# maven = "latest"
# ruby = "latest"

cargo-binstall = "1.10.16"
# cargo-binstall = "1.10.21"
uv = "0.5.10"
# uv = "0.5.18"
ninja = "1.12.1"
yq = "4.44.6"
# conan = "2.11.0"

# mkcert = "latest"
# websocat = "latest"
# sqlite = "latest"
# terraform = "latest"
# bitwarden = "latest"
# direnv = "latest"
# caddy = "latest"

[settings]
# プラグインは他のバージョン管理ツールのバージョンファイルを読み取ることができます（プラグインが有効な場合）
# 例えば、nodeのnvmの場合は.nvmrc
legacy_version_file = true                     # デフォルトで有効（asdfとは異なる）
#legacy_version_file_disable_tools = ['python'] # 特定のツールを無効にする

# `mise install`でダウンロードしたアーカイブを常に保持するように設定
always_keep_download = false        # デフォルトではインストール後に削除
always_keep_install = false         # デフォルトでは失敗時に削除

# プラグインリポジトリの更新を取得する頻度を設定（分単位）
# 新しいランタイムがインストールされるたびに更新されます
# （注：これはまだ実装されていませんが、追加予定です：https://github.com/jdx/mise/issues/128）
# plugin_autoupdate_last_check_duration = '1 week' # 0に設定すると更新を無効化

# これらのプレフィックスを持つ設定ファイルはデフォルトで信頼されます
trusted_config_paths = [
    '~/dotfiles',
]

verbose = false       # trueに設定すると、インストールの全出力が表示されます。`MISE_VERBOSE`を参照
asdf_compat = true    # trueに設定すると、.tool-versionsがasdfと互換性を持つようになります。`MISE_ASDF_COMPAT`を参照
http_timeout = "30s"  # HTTPリクエストのタイムアウトを設定します。`MISE_HTTP_TIMEOUT`を参照
jobs = 4              # 並行してインストールするプラグインやランタイムの数。デフォルトは`4`
raw = false           # trueに設定すると、プラグインを直接stdin/stdout/stderrにパイプします
yes = true            # trueに設定すると、すべてのプロンプトに自動的に「はい」と答えます

#not_found_auto_install = true # `MISE_NOT_FOUND_AUTO_INSTALL`を参照
#task_output = "prefix" # タスクランナーの詳細については参照
#paranoid = false       # `MISE_PARANOID`を参照

#shorthands_file = '~/.config/mise/shorthands.toml' # ショートハンドファイルのパス、`MISE_SHORTHANDS_FILE`を参照
#disable_default_shorthands = false # デフォルトのショートハンドを無効にする、`MISE_DISABLE_DEFAULT_SHORTHANDS`を参照
# disable_tools = ['node']           # 特定のツールを無効にする、通常はコアツールをオフにするために使用

env_file = '.env' # .env ファイルから環境変数を読み込む、`MISE_ENV_FILE`を参照

experimental = true # 実験的な機能を有効にする

# 設定ファイルを持つディレクトリに入るときに表示されるメッセージを設定
status.missing_tools = "if_other_versions_installed"
status.show_env = false
status.show_tools = false

# rust.cargo_home = "~/.cargo"
# rust.rustup_home = "~/.rustup"

cargo.binstall = true
pipx.uvx = true
# npm.bun = true

# [[env]]
# _.file = '.env'

# [[env]]
# _.source = 'dot_aliases'

# [[env]]
# _.path = [
#   '~/.local/bin',
#   './node_modules/.bin',
# ]
