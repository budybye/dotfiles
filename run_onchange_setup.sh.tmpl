#! /usr/bin/env bash

echo "run_once_setup.sh.tmpl"
echo "{{ .chezmoi.os }} system setup"
echo "--------------------------------"

{{ if eq .chezmoi.os "darwin" -}}

user_setup() {
    # コンピュータ名、ホスト名、ローカルホスト名、ユーザー名を設定
    sudo scutil --set ComputerName "iCom"
    sudo scutil --set LocalHostName "101"
    sudo scutil --set HostName "101"
    sudo scutil --set UserName "hotmilk"
    whoami
}

system_setup() {
    # (on マシンがフリーズしたら自動的にリスタート)
    systemsetup -setrestartfreeze on
    # スリープしない
    systemsetup -setcomputersleep Off
    # ネットワーク時刻サーバーを設定
    # sudo systemsetup -setnetworktimeserver time.apple.com
    # タイムゾーンを設定
    sudo systemsetup -settimezone "Asia/Tokyo"
    # リモートログインを有効化
    sudo systemsetup -setremotelogin on
}

app_setup() {
    # 他のMacで購入したアプリを自動的にダウンロードする
    defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1
    # ソフトウェアの自動更新を有効化
    defaults write com.apple.commerce AutoUpdate -bool true
    # WebKitデベロッパーツールを有効にする
    defaults write com.apple.appstore WebKitDeveloperExtras -bool true
    # デバッグメニューを有効にする
    defaults write com.apple.appstore ShowDebugMenu -bool true
    # 自動更新チェックを有効にする
    defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true
    # 毎日アプリケーションのアップデートを確認する
    defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
    # アプリケーションのアップデートをバックグラウンドでダウンロードする
    defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1
    # システムデータファイルとセキュリティ更新プログラムをインストールする
    defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1
    # 他のMacで購入したアプリを自動的にダウンロードする
    defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1
    # アプリケーションの自動更新を有効化
    defaults write com.apple.commerce AutoUpdate -bool true
    # 再起動が必要なアプリケーションの場合自動で再起動を有効化する
    defaults write com.apple.commerce AutoUpdateRestartRequired -bool true
}

interface_setup() {
    # F1、F2などのキーを標準的なファンクションキーとして使用
    defaults write -g com.apple.keyboard.fnState -bool true
    # キーリピートを早くする
    defaults write -g KeyRepeat -int 1
    # キー入力の連打を有効化させる
    defaults write -g ApplePressAndHoldEnabled -bool false
    # Enable `Tap to click` （タップでクリックを有効にする）
    defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
    # 三本指でドラッグ
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -bool true && \
    defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true
    # フルスクリーンアプリケーション感をするために4本指でスワイプを有効にする
    defaults write com.apple.AppleMultitouchTrackpad.plist TrackpadFourFingerVertSwipeGesture -int 2 && \
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad.plist TrackpadFourFingerVertSwipeGesture -int 2
    # トラックパッドのナチュラルスクロールをオンにする
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool true
    # マウスの動きを高速化
    defaults write "Apple Global Domain" com.apple.mouse.scaling 4.0
    # トラックパッドの動きを高速化
    defaults write "Apple Global Domain" com.apple.trackpad.scaling 4.0
}

dock_setup() {
    # Dock を自動で隠す
    defaults write com.apple.dock autohide -bool true
    # dockの動作を素早くする
    defaults write com.apple.dock autohide-time-modifier -float 0.13
    # Dock が表示されるまでの待ち時間を無効にする
    defaults write com.apple.dock autohide-delay -float 0.01
    # Dockからアプリを起動するときのアニメーションを無効
    defaults write com.apple.dock launchanim -bool false
    # Automatically hide or show the Dock （Dock を自動的に隠す）
    defaults write com.apple.dock autohide -bool true
    # Wipe all app icons from the Dock （Dock に標準で入っている全てのアプリを消す、Finder とごみ箱は消えない）
    defaults write com.apple.dock persistent-apps -array
    # Dock Size
    defaults write com.apple.dock tilesize -int 50
    # Dock 拡大
    defaults write com.apple.dock magnification -bool true
    # Dock 拡大サイズ
    defaults write com.apple.dock largesize -int 78
    # ウィンドウをアプリケーションアイコンにしまう
    defaults write com.apple.dock minimize-to-application -bool true
    # 最近使ったアプリを Dock に表示しない
    defaults write com.apple.dock show-recents -bool false
}

window_setup() {
    # Show the ~/Library directory （ライブラリディレクトリを表示、デフォルトは非表示）
    chflags nohidden ~/Library
    # ログイン画面でシステム情報を表示する
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
    # ダークモードをオンにする
    sudo defaults write /Library/Preferences/.GlobalPreferences AppleInterfaceTheme Dark
    # 時計アイコンクリック時に OS やホスト名 IP を表示する
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
    # クラッシュレポートを無効化する
    defaults write com.apple.CrashReporter DialogType -string "none"
    # 未確認のアプリケーションを実行する際のダイアログを無効にする
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    # ダウンロードしたファイルを開くときの警告ダイアログをなくしたい
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    # 未確認のアプリケーションを実行する際のダイアログを無効にする
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    # ダイアログ表示やウィンドウリサイズ速度を高速化する
    defaults write -g NSWindowResizeTime -float 0.001
    # (保存ダイアログのデフォルト表示スタイル) -> true (常に詳細な情報を開いて表示)
    defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
    # アクセントカラーをマルチカラーに設定する
    defaults write -g AppleAccentColor -int -1
    # ウィンドウを開閉するときのアニメーションを無効
    defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
    # スペルの訂正を無効にする
    defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    # スクロールバーを常時表示する
    defaults write -g AppleShowScrollBars -string "Always"
    # ウィンドウサイズを調整する際の加速再生
    defaults write -g NSWindowResizeTime -float 0.001
    # Quick Lookウィンドウのアニメーションをオフ
    defaults write -g QLPanelAnimationDuration -float 0

    defaults write -g AccountInfoValidationCounter -int 4
    # テキストエディットをプレーンテキストで使う
    defaults write com.apple.TextEdit RichText -int 0
    # terminalでUTF-8のみを使用する
    defaults write com.apple.terminal StringEncodings -array 4
    # スクリーンショットをjpgで保存
    defaults write com.apple.screencapture type jpg
    # ネットワークディスクで、`.DS_Store` ファイルを作らない
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    # 日付表示設定、曜日を表示
    defaults write com.apple.menuextra.clock 'DateFormat' -string 'EEE H:mm'
    # Bluetooth ヘッドフォン・ヘッドセットの音質を向上させる
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40
}

finder_setup() {
    # 全ての拡張子のファイルを表示
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true
    # ディレクトリのスプリングロードを有効化
    defaults write NSGlobalDomain com.apple.springing.enabled -bool true
    # スプリングロード遅延を除去
    defaults write NSGlobalDomain com.apple.springing.delay -float 0
    # 新しいウィンドウでデフォルトでホームフォルダを開く
    defaults write com.apple.finder NewWindowTarget -string "PfDe"
    defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
    # 隠しファイルを常にファインダーに表示する
    defaults write com.apple.finder AppleShowAllFiles -bool true
    # Finder のタイトルバーにフルパスを表示する
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    # 検索時にデフォルトでカレントディレクトリを検索
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
    # 拡張子変更時の警告を無効化
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
    # タブバーを表示する
    defaults write com.apple.finder ShowTabView -bool true
    # パスバーを表示する
    defaults write com.apple.finder ShowPathbar -bool true
    # ステータスバーを表示する
    defaults write com.apple.finder ShowStatusBar -bool true
    # Finderで情報ウィンドウを開くときのアニメーションを無効
    defaults write com.apple.finder DisableAllAnimations -bool true
    # ゴミ箱を空にする前の警告の無効化
    defaults write com.apple.finder WarnOnEmptyTrash -bool false
    # 「新規フォルダ」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "新規フォルダ" -string "^k"
    # 「ここに項目を移動」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "ここに項目を移動" -string "@^v"
    # 「ゴミ箱に入れる」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "ゴミ箱に入れる" -string "^d"
    # 「情報を見る」のショートカットキー設定
    defaults write com.apple.Finder NSUserKeyEquivalents -dict-add "情報を見る" -string "^l"
}

search_setup() {
    # Spotlight検索を表示を無効化
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 64 "<dict><key>enabled</key><false/><key>value</key><dict><key>parameters</key><array><integer>65535</integer><integer>49</integer><integer>1048576</integer></array><key>type</key><string>standard</string></dict></dict>"
    # Finderの検索ウインドウを表示を無効化
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 65 "<dict><key>enabled</key><false/><key>value</key><dict><key>parameters</key><array><integer>65535</integer><integer>49</integer><integer>1572864</integer></array><key>type</key><string>standard</string></dict></dict>"
    # Spotlight検索を表示、Finderの検索ウインドウを表示が無効化になっているか確認する（64、65をチェックすること）
    # defaults read com.apple.symbolichotkeys AppleSymbolicHotKeys | grep -E '64|65'
}

network_setup() {
    # sudo networksetup -SetAirportPower en0 on
    # sudo networksetup -SetAirportNetwork en0 <SSID> <PASSWORD>
    # sudo networksetup -SetDNSServers Wi-Fi 1.1.1.2 1.0.0.2 192.168.0.1
    # sudo networksetup -SetV6Off Wi-Fi
    networksetup -ListNetworkServiceOrder
    nslookup apple.com
}

restart() {
    echo 'Rebooting to reflect settings'
    # 再起動
    for app in \
        "Activity Monitor" \
        "Address Book" \
        "Calendar" \
        "Contacts" \
        "Dock" \
        "Finder" \
        "Mail" \
        "Messages" \
        "Photos" \
        "Safari" \
        "Terminal" \
        "SystemUIServer"; do
        killall "${app}" > /dev/null 2>&1
    done
}

echo "macOS setup start..."
# user_setup
system_setup
# app_setup
interface_setup
window_setup
dock_setup
finder_setup
search_setup
network_setup
restart
echo "macOS setup completed."
fastfetch

{{ else if eq .chezmoi.os "linux" -}}

# ユーザー名を取得
USER_NAME=$(whoami)
# アーキテクチャを取得
arch="$(dpkg --print-architecture)"

# デスクトップ環境のインストール
# package は .chezmoidata/packages.yaml に記載
# .packages.linux.gui にはxfceデスクトップ環境をインストールするパッケージを記載
desktop_setup() {
    sudo apt-get update -y && sudo apt-get upgrade -y

    {{ range .packages.linux.gui -}}
    if ! dpkg -l | grep -q {{ . }}; then
        sudo apt-get install -y {{ . }} || echo "{{ . }} install failed." >> ${HOME}/which
    fi
    {{ end }}

    #sudo apt-get remove -y light-locker xscreensaver &&
    sudo apt-get autoremove -y && sudo apt-get clean && sudo rm -rf /var/cache/apt /var/lib/apt/lists/*
    echo "desktop packages installed."
}

install_snap() {
    command -v snap >/dev/null || sudo apt-get install -y snapd && echo "snapd installed." || echo "snapd install failed."

    command -v multipass >/dev/null || sudo snap install multipass && echo "multipass installed." || echo "multipass install failed."

    command -v speedtest >/dev/null || sudo snap install speedtest && echo "speedtest installed." || echo "speedtest install failed."
    command -v codium >/dev/null || sudo snap install codium --classic && echo "codium installed." || echo "codium install failed."
    command -v alacritty >/dev/null || sudo snap install alacritty --classic && echo "alacritty installed." || echo "alacritty install failed."

    if command -v firefox >/dev/null 2>&1; then
        sudo snap remove firefox || sudo apt remove firefox && echo "firefox uninstalled." || echo "firefox uninstall failed."
    fi

    #command -v chromium >/dev/null || sudo snap install chromium && echo "chromium installed." || echo "chromium install failed."

    echo "snap tools installed."
}

install_brave_browser() {
    if ! command -v brave-browser >/dev/null 2>&1; then
        sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
        sudo apt-get update -y
        sudo apt-get install -y brave-browser || echo "brave browser install failed."
        echo "brave browser installed."
    else
        echo "brave browser already installed."
    fi
}

install_tabby_terminal() {
    if ! command -v tabby >/dev/null 2>&1; then
        curl https://packagecloud.io/install/repositories/eugeny/tabby/script.deb.sh | sudo bash
        sudo apt-get update -y
        sudo apt-get install -y tabby-terminal || echo "tabby terminal install failed."
        echo "tabby terminal installed."
    else
        echo "tabby terminal already installed."
    fi
}

install_cloudflare_warp() {
    if ! command -v warp-cli >/dev/null 2>&1; then
        sudo curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
        sudo apt-get update -y
        sudo apt-get install -y cloudflare-warp || echo "cloudflare warp install failed."
        echo "cloudflare warp installed."

        warp-cli --accept-tos registration new
        warp-cli --accept-tos mode warp
        warp-cli --accept-tos dns families malware
        warp-cli --accept-tos connect
        warp-cli --accept-tos disconnect
    else
        echo "cloudflare warp already installed."
    fi
}

install_element_desktop() {
    if ! command -v element-desktop >/dev/null 2>&1; then
        sudo apt-get install -y wget apt-transport-https
        sudo wget -O /usr/share/keyrings/element-io-archive-keyring.gpg https://packages.element.io/debian/element-io-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/element-io-archive-keyring.gpg] https://packages.element.io/debian/ default main" | sudo tee /etc/apt/sources.list.d/element-io.list
        sudo apt-get update -y
        sudo apt-get install -y element-desktop || echo "element desktop install failed."
    else
        echo "element desktop already installed."
    fi
}

install_github_desktop() {
    if ! command -v github-desktop >/dev/null 2>&1; then
        sudo curl -L https://github.com/shiftkey/desktop/releases/download/release-3.4.3-linux1/GitHubDesktop-linux-${arch}-3.4.3-linux1.deb -o GitHubDesktop-linux-${arch}-3.4.3-linux1.deb
        sudo dpkg -i GitHubDesktop-linux-${arch}-3.4.3-linux1.deb || echo "github desktop install failed."
        sudo rm -f GitHubDesktop-linux-${arch}-3.4.3-linux1.deb
        echo "github desktop installed."
    else
        echo "github desktop already installed."
    fi
}

install_cursor() {
    appimage="${HOME}/Applications/cursor"
    mkdir -p "${HOME}/Applications"
    if ! [ -f "${appimage}" ]; then
        if [ "${arch}" = "amd64" ]; then
            curl -L https://downloader.cursor.sh/inulx -o "${appimage}" || echo "cursor download failed."
        else
            curl -L https://github.com/coder/cursor-arm/releases/download/v0.42.2/cursor_0.42.2_linux_arm64.AppImage -o "${appimage}" || echo "cursor download failed."
        fi
    fi
    sudo chmod a+x "${appimage}"
    sudo apt-get install -y libfuse2 || echo "libfuse2 install failed."
    echo "${appimage} installed."
}

install_wireshark() {
    if ! command -v wireshark >/dev/null 2>&1; then
        sudo apt install -y wireshark || echo "wireshark install failed."
        sudo groupadd -f wireshark
        sudo usermod -aG wireshark "$USER_NAME"
        sudo chmod +x /usr/bin/dumpcap
        echo "wireshark installed."
    else
        echo "wireshark already installed."
    fi
}

install_ruby_fusuma() {
    command -v gem >/dev/null || mise use ruby -g -y || sudo apt-get install -y ruby || echo "ruby install failed."
    echo "ruby installed."

    if ! command -v fusuma >/dev/null 2>&1; then
        sudo gem install fusuma || echo "fusuma install failed."
        sudo groupadd -f input
        sudo usermod -aG input "$USER_NAME"
        fusuma -d
        echo "fusuma installed."
    else
        echo "fusuma already installed."
    fi
}

japan_setup() {
    echo "japan setup start..."
    #sudo localectl set-locale LANG=ja_JP.UTF-8
    #sudo localectl set-locale LANGUAGE=ja_JP:ja
    #sudo localectl set-x11-keymap jp
    #sudo localectl set-keymap jp106
    #sudo timedatectl set-timezone Asia/Tokyo
    LANG=C xdg-user-dirs-update --force
    # 入力メソッドとしてfcitx5を設定
    im-config -n fcitx5
    echo "japan setup completed."
}

install_pipewire() {
    doko=$(pwd)

    # pulseaudio をインストール
    sudo apt-get install -y pulseaudio libpulse-dev dh-autoreconf dpkg-dev && echo "pulseaudio installed." || echo "pulseaudio install failed."

    # pipewire をインストール
    sudo apt-get install -y pipewire pipewire-audio libspa-0.2-dev libpipewire-0.3-dev autoconf libtool && echo "pipewire installed." || echo "pipewire install failed."
    mkdir -p "${HOME}/.config/pipewire"

    if [ ! -d "${HOME}/.config/pipewire/pulseaudio-module-xrdp" ]; then
        git clone https://github.com/neutrinolabs/pulseaudio-module-xrdp.git "${HOME}/.config/pipewire/pulseaudio-module-xrdp"
        cd "${HOME}/.config/pipewire/pulseaudio-module-xrdp"
        ./bootstrap
        ./configure PULSE_DIR=$(cd ..; pwd)
        make
        sudo make install
        cd "${doko}"
    fi
    echo "pipewire installed."
}

xrdp_setup() {
    echo "xrdp setup start..."
    sudo groupadd -f ssl-cert
    sudo groupadd -f xrdp
    # ubuntuユーザーを必要なグループに追加
    sudo usermod -aG ssl-cert,xrdp "${USER_NAME}"
    # サービスの再起動
    sudo systemctl daemon-reload
    sudo systemctl restart rsyslog
    # ファイアウォールで3389番ポート（RDP）を許可
    sudo ufw allow 3389
    # xrdpサービスを有効化
    sudo systemctl enable xrdp
    # デフォルトのセッションマネージャーをxfce4-sessionに設定
    sudo update-alternatives --set x-session-manager /usr/bin/xfce4-session
    # xrdpサービスを起動
    sudo systemctl start xrdp
    echo "xrdp setup completed."

    echo "以下のコマンドを実行してパスワードを更新してください"
    echo "sudo passwd ${USER_NAME}"
    # ログイン後、ubuntuユーザーのパスワードを再設定を推奨
    # パスワードを再設定しないとログインできない
    echo "${USER_NAME}:${USER_NAME}" | sudo chpasswd
}

echo "ubuntu desktop setup start..."
desktop_setup
install_snap
install_brave_browser
install_tabby_terminal
install_cloudflare_warp
install_github_desktop
install_cursor
install_element_desktop
install_ruby_fusuma
# install_wireshark
install_pipewire
japan_setup
xrdp_setup
echo "ubuntu desktop setup completed."
neofetch

{{ end -}}

echo "--------------------------------"
echo "desktop setup complete"
echo "--------------------------------"
