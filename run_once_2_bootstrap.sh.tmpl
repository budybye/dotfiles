#! /usr/bin/env bash

USERNAME=$(whoami)

echo "--------------------------------"
echo "Welcome to my dotfiles!!"
echo "dotfilesDir: {{ .dotfilesDir }}"
echo "user: $USERNAME"
echo "OS info ..."
uname -a
echo "SHELL: $SHELL"
echo "--------------------------------"
# .env の確認と作成
echo ".env checking..."
echo {{ .name | quote }}
echo "export GIT_USER=$USERNAME" >>{{ .dotfilesDir }}/.env
cat {{ .dotfilesDir }}/.env
env
echo "--------------------------------"
echo "PATH ..."
echo "$PATH" | tr ':' '\n'
echo "--------------------------------"
echo "SSH key ..."
cat /etc/ssh/sshd_config
ls -la ~/.ssh
cat ~/.ssh/id_ed25519.pub
echo "--------------------------------"
echo "git config ..."
cat ~/.config/git/user.conf
git config --global user.name
git config --global user.email
git config --list
git config --global commit.template ${HOME}/.config/git/commit.template
echo "--------------------------------"
echo "Package update && check start!!"
echo "--------------------------------"

{{- if eq .chezmoi.os "linux" }}

    echo "Linux"
    # アーキテクチャを取得
    arch="$(dpkg --print-architecture)"

    # Zsh をデフォルトシェルに変更する関数
    change_shell_to_zsh() {
        # zsh がインストールされているか確認
        command -v zsh >/dev/null || sudo apt-get install -y zsh || echo "zsh install failed." >> ${HOME}/which
        # デフォルトシェルを変更
        zsh_path=$(command -v zsh)
        sudo chsh -s "${zsh_path}" "${USERNAME}" || echo "zsh default shell change failed." >> ${HOME}/which
        command -v /bin/zsh >/dev/null || sudo ln -sf /usr/bin/zsh /bin/zsh
        echo "Your shell is ${SHELL}"
        echo "zsh default shell changed to ${zsh_path}."
        command -v zsh >> ${HOME}/which || echo "zsh not found" >> ${HOME}/which
    }

    # 必要なパッケージをインストールする関数
    install_packages() {
        sudo dpkg --configure -a
        apt --version
        # sudo sed -i 's/deb.debian.org/ftp.jp.debian.org/g' /etc/apt/sources.list
        sudo apt-get update -y
        sudo apt-get upgrade -y
        sudo apt-get install -y {{ .packages.linux.cli | join " " }} || echo "apt install failed." >> ${HOME}/which
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        sudo rm -rf /var/cache/apt /var/lib/apt/lists/*
        sudo apt-get check
        echo "apt install completed."
    }

    install_docker_compose() {
        if command -v docker-compose >/dev/null 2>&1; then
            echo "docker-compose already installed."
        else
            # 最新バージョンを取得
            COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
            # ダウンロード URL の作成
            COMPOSE_URL="https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)"
            # Docker Compose のバイナリをダウンロード
            sudo curl -L "$COMPOSE_URL" -o /usr/local/bin/docker-compose || echo "docker-compose download failed." >> ${HOME}/which
            sudo chmod +x /usr/local/bin/docker-compose
            command -v docker compose >> ${HOME}/which || echo "docker-compose not found" >> ${HOME}/which
           echo "docker-compose installed."
        fi
    }

    install_docker() {
        if command -v docker >/dev/null 2>&1; then
            echo "docker already installed."
        else
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=${arch} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io || echo "docker install failed." >> ${HOME}/which
            sudo chmod 666 /var/run/docker.sock
            sudo groupadd -f docker
            sudo usermod -aG docker "$USERNAME"
            sudo systemctl enable docker
            docker info
            command -v docker >> ${HOME}/which || echo "docker not found" >> ${HOME}/which
            echo "docker daemon started."
        fi
    }

    # mise でインストールする関数
    install_mise() {
        if ! command -v mise >/dev/null 2>&1; then
            echo "mise install start..."
            curl https://mise.run | sh || {
                sudo install -dm 755 /etc/apt/keyrings
                wget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1>/dev/null
                echo "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=${arch}] https://mise.jdx.dev/deb stable main" | sudo tee /etc/apt/sources.list.d/mise.list
                sudo apt-get update -y && sudo apt-get install -y mise || echo "mise install failed." >> ${HOME}/which
            }
        else
            echo "mise already installed."
        fi
        command -v mise >> ${HOME}/which || echo "mise not found" >> ${HOME}/which
        # version 指定しないと arm64 でエラーになる
        mise use -g bun go@1.22.1 -y --verbose || echo "mise use failed." >> ${HOME}/which
        mise activate bash || true
        mise activate --shims || true
        echo "mise setup completed."
        for cmd in bun go; do
            command -v "$cmd" >> ${HOME}/which || echo "$cmd not found" >> ${HOME}/which
        done
    }

    # Cargo および Rust 関連ツールをインストールする関数
    install_cargo_tools() {
        echo "cargo install start..."
        command -v cargo >/dev/null || mise use rust -y || sudo apt-get install -y cargo || echo "cargo install failed." >> ${HOME}/which
        echo "cargo installed."
        command -v cargo >> ${HOME}/which || echo "cargo not found" >> ${HOME}/which

        echo "cargo tools install start..."
        cargo install starship@1.20.1 sheldon fd-find@9.0.0 xh bat || echo "cargo tools install failed." >> ${HOME}/which
        echo "cargo tools installed."
        for cmd in starship sheldon fd xh bat; do
            command -v "$cmd" >> ${HOME}/which || echo "$cmd not found" >> ${HOME}/which
        done
    }

    install_flatpak() {
        command -v flatpak >/dev/null || sudo apt-get install -y flatpak || echo "flatpak install failed." >> ${HOME}/which
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        echo "flatpak installed."
        command -v flatpak >> ${HOME}/which || echo "flatpak not found" >> ${HOME}/which
    }

    # Go と Aqua をインストールする関数
    install_go_aqua() {
        mise use -g go@1.22.1 -y || echo "go install failed." >> ${HOME}/which
        command -v go >> ${HOME}/which || echo "go not found" >> ${HOME}/which

        ${HOME}/.local/share/mise/installs/go/1.22.1/bin/go install github.com/aquaproj/aqua/v2/cmd/aqua@latest || echo "aqua install failed." >> ${HOME}/which
        echo "aqua installed."
        command -v aqua >> ${HOME}/which || echo "aqua not found" >> ${HOME}/which
    }

    # mkcert をインストールおよび設定する関数
    install_mkcert() {
        echo "mkcert install start..."
        command -v mkcert >/dev/null || mise use mkcert -y || sudo apt install -y mkcert || echo "mkcert install failed." >> ${HOME}/which
        mkcert -install
        echo "mkcert installed."
        command -v mkcert >> ${HOME}/which || echo "mkcert not found" >> ${HOME}/which
    }

    install_multipass() {
        echo "multipass install start..."
        command -v multipass >/dev/null || sudo snap install multipass || echo "multipass install failed." >> ${HOME}/which
        echo "multipass installed."
        command -v multipass >> ${HOME}/which || echo "multipass not found" >> ${HOME}/which
    }

    install_act() {
        echo "act install start..."
        command -v act >/dev/null || curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash || echo "act install failed." >> ${HOME}/which
        sudo mv ./bin/act ${HOME}/.local/bin && sudo chmod +x ${HOME}/.local/bin/act
        echo "act installed."
        command -v act >> ${HOME}/which || echo "act not found" >> ${HOME}/which
    }

    install_volta() {
        echo "volta install start..."
        command -v volta >/dev/null || curl https://get.volta.sh | bash || echo "volta install failed." >> ${HOME}/which
        echo "volta installed."
        command -v volta >> ${HOME}/which || echo "volta not found" >> ${HOME}/which
    }

    install_cli_tools() {
        export PATH="$HOME/.cache/.bun/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.volta/bin:$HOME:$HOME/.bun/bin:$HOME/bin:$PATH"
        echo "CLI tools install start..."
        install_packages
        change_shell_to_zsh
        install_mise
        install_docker
        install_docker_compose
        install_cargo_tools
        install_flatpak
        install_go_aqua
        install_volta
        install_mkcert
        install_act
        install_multipass
        echo "install completed. please reboot."
        neofetch
        cat ${HOME}/which && rm -f ${HOME}/which
    }

    # スクリプトを実行
    install_cli_tools

{{- else if eq .chezmoi.os "darwin" }}

    echo "Darwin"

    # Xcode コマンドラインツールのインストールおよびパスの設定
    install_xcode_command_line_tools() {
        echo "Xcode command line tools check it..."
        command -v xcode-select -p >/dev/null || xcode-select --install || echo "Xcode command line tools install failed."
        echo "Xcode command line tools install done."
        CURRENT_PATH=$(xcode-select -p)
        DESIRED_PATH="/Library/Developer/CommandLineTools"

        if [ "$CURRENT_PATH" != "$DESIRED_PATH" ]; then
            echo "change path to $DESIRED_PATH"
            sudo xcode-select --switch "$DESIRED_PATH" || {
                echo "path change failed. reset initial settings."
                sudo xcode-select --reset
            }
        fi
        echo "$DESIRED_PATH setup done."
    }

    # Homebrew のインストールおよび設定
    install_homebrew() {
        echo "Homebrew install check it..."
        command -v brew >/dev/null || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || echo "Homebrew install failed."
        eval "$(/opt/homebrew/bin/brew shellenv)"
    }

    # Brewfile を使用してパッケージをインストール
    install_brew_packages() {
        BREWFILE_PATH="$HOME/.config/Brewfile"

        if [ -f "$BREWFILE_PATH" ]; then
            echo "Brewfile ($BREWFILE_PATH) install packages."
            brew tap Homebrew/bundle
            brew bundle --file="$BREWFILE_PATH" || echo "brew bundle install failed"
        else
            echo "specified Brewfile ($BREWFILE_PATH) not found. skip."
        fi
        brew --version
        brew install {{ .packages.darwin.brews | join " " }} || echo "brew install failed."
        brew update
        brew upgrade
        brew autoremove
        brew cleanup
        brew doctor
        brew list
        echo "packages install done."
    }

    # Rosetta 2 のインストール (Apple Silicon の場合)
    install_rosetta() {
        if [[ "$(uname -m)" == "arm64" ]]; then
            echo "Apple Silicon Mac detected. check Rosetta 2 install..."
            /usr/bin/pgrep oahd >/dev/null || /usr/sbin/softwareupdate --install-rosetta --agree-to-license || echo "Rosetta 2 install failed."
        else
            echo "Rosetta 2 not needed (Intel Mac)."
        fi
        echo "Rosetta 2 install done."
    }

    bootstrap() {
        echo "bootstrap start."
        install_xcode_command_line_tools
        install_homebrew
        install_brew_packages
        install_rosetta
        echo "bootstrap done."
        fastfetch
        x
    }
    bootstrap

{{- end }}

echo "--------------------------------"
echo "zsh --version $(zsh --version)"
echo "Package update && check done!!"
